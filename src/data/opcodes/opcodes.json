[
  {
    "name": "XCHG_0I",
    "alias_of": "",
    "tlb": "#0 i:(## 4) {1 <= i}",
    "doc_category": "stack_basic",
    "doc_opcode": "0i",
    "doc_fift": "s[i] XCHG0",
    "doc_stack": "",
    "doc_gas": 18,
    "doc_description": "Interchanges `s0` with `s[i]`, `1 <= i <= 15`."
  },
  {
    "name": "PUSH",
    "alias_of": "",
    "tlb": "#2 i:uint4",
    "doc_category": "stack_basic",
    "doc_opcode": "2i",
    "doc_fift": "s[i] PUSH",
    "doc_stack": "",
    "doc_gas": 18,
    "doc_description": "Pushes a copy of the old `s[i]` into the stack."
  },
  {
    "name": "LDU",
    "alias_of": "",
    "tlb": "#D3 cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D3cc",
    "doc_fift": "[cc+1] LDU",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads an unsigned `cc+1`-bit integer `x` from _Slice_ `s`."
  },
  {
    "name": "PUSHINT_LONG",
    "alias_of": "",
    "tlb": "#82 l:(## 5) xxx:(int (8 * l + 19))",
    "doc_category": "const_int",
    "doc_opcode": "82lxxx",
    "doc_fift": "[xxx] PUSHINT\n[xxx] INT",
    "doc_stack": "- xxx",
    "doc_gas": 23,
    "doc_description": "Pushes integer `xxx`.\n_Details:_ 5-bit `0 <= l <= 30` determines the length `n=8l+19` of signed big-endian integer `xxx`.\nThe total length of this instruction is `l+4` bytes or `n+13=8l+32` bits."
  },
  {
    "name": "EQUAL",
    "alias_of": "",
    "tlb": "#BA",
    "doc_category": "compare_int",
    "doc_opcode": "BA",
    "doc_fift": "EQUAL",
    "doc_stack": "x y - x=y",
    "doc_gas": 18,
    "doc_description": "Returns `-1` if `x=y`, `0` otherwise."
  },
  {
    "name": "THROWIFNOT",
    "alias_of": "",
    "tlb": "#F2E4_ n:uint11",
    "doc_category": "exceptions",
    "doc_opcode": "F2E4_n",
    "doc_fift": "[n] THROWIFNOT",
    "doc_stack": "f - ",
    "doc_gas": null,
    "doc_description": "For `0 <= n < 2^11`, an encoding of `[n] THROWIFNOT` for larger values of `n`."
  },
  {
    "name": "PUSHINT_16",
    "alias_of": "",
    "tlb": "#81 xxxx:int16",
    "doc_category": "const_int",
    "doc_opcode": "81xxxx",
    "doc_fift": "[xxxx] PUSHINT\n[xxxx] INT",
    "doc_stack": "- xxxx",
    "doc_gas": 34,
    "doc_description": "Pushes integer `xxxx`. `-2^15 <= xx < 2^15`."
  },
  {
    "name": "POP",
    "alias_of": "",
    "tlb": "#3 i:uint4",
    "doc_category": "stack_basic",
    "doc_opcode": "3i",
    "doc_fift": "s[i] POP",
    "doc_stack": "",
    "doc_gas": 18,
    "doc_description": "Pops the old `s0` value into the old `s[i]`."
  },
  {
    "name": "PUSHCONT_SHORT",
    "alias_of": "",
    "tlb": "#9 x:(## 4) ssss:((8 * x) * Bit)",
    "doc_category": "const_data",
    "doc_opcode": "9xccc",
    "doc_fift": "[builder] PUSHCONT\n[builder] CONT",
    "doc_stack": "- c",
    "doc_gas": 18,
    "doc_description": "Pushes a continuation made from `builder`.\n_Details:_ Pushes an `x`-byte continuation for `0 <= x <= 15`."
  },
  {
    "name": "STU",
    "alias_of": "",
    "tlb": "#CB cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CBcc",
    "doc_fift": "[cc+1] STU",
    "doc_stack": "x b - b'",
    "doc_gas": 26,
    "doc_description": "Stores an unsigned `cc+1`-bit integer `x` into _Builder_ `b`. In all other respects it is similar to `STI`."
  },
  {
    "name": "PUSHINT_4",
    "alias_of": "",
    "tlb": "#7 i:uint4",
    "doc_category": "const_int",
    "doc_opcode": "7i",
    "doc_fift": "[x] PUSHINT\n[x] INT",
    "doc_stack": "- x",
    "doc_gas": 18,
    "doc_description": "Pushes integer `x` into the stack. `-5 <= x <= 10`.\nHere `i` equals four lower-order bits of `x` (`i=x mod 16`)."
  },
  {
    "name": "IFJMP",
    "alias_of": "",
    "tlb": "#E0",
    "doc_category": "cont_conditional",
    "doc_opcode": "E0",
    "doc_fift": "IFJMP",
    "doc_stack": "f c - ",
    "doc_gas": 18,
    "doc_description": "Jumps to `c` (similarly to `JMPX`), but only if `f` is non-zero."
  },
  {
    "name": "CTOS",
    "alias_of": "",
    "tlb": "#D0",
    "doc_category": "cell_parse",
    "doc_opcode": "D0",
    "doc_fift": "CTOS",
    "doc_stack": "c - s",
    "doc_gas": null,
    "doc_description": "Converts a _Cell_ into a _Slice_. Notice that `c` must be either an ordinary cell, or an exotic cell which is automatically _loaded_ to yield an ordinary cell `c'`, converted into a _Slice_ afterwards."
  },
  {
    "name": "LDMSGADDR",
    "alias_of": "",
    "tlb": "#FA40",
    "doc_category": "app_addr",
    "doc_opcode": "FA40",
    "doc_fift": "LDMSGADDR",
    "doc_stack": "s - s' s''",
    "doc_gas": 26,
    "doc_description": "Loads from _Slice_ `s` the only prefix that is a valid `MsgAddress`, and returns both this prefix `s'` and the remainder `s''` of `s` as slices."
  },
  {
    "name": "NEWC",
    "alias_of": "",
    "tlb": "#C8",
    "doc_category": "cell_build",
    "doc_opcode": "C8",
    "doc_fift": "NEWC",
    "doc_stack": "- b",
    "doc_gas": 18,
    "doc_description": "Creates a new empty _Builder_."
  },
  {
    "name": "XCHG_1I",
    "alias_of": "",
    "tlb": "#1 i:(## 4) {2 <= i}",
    "doc_category": "stack_basic",
    "doc_opcode": "1i",
    "doc_fift": "s1 s[i] XCHG",
    "doc_stack": "",
    "doc_gas": 18,
    "doc_description": "Interchanges `s1` with `s[i]`, `2 <= i <= 15`."
  },
  {
    "name": "ENDC",
    "alias_of": "",
    "tlb": "#C9",
    "doc_category": "cell_build",
    "doc_opcode": "C9",
    "doc_fift": "ENDC",
    "doc_stack": "b - c",
    "doc_gas": 518,
    "doc_description": "Converts a _Builder_ into an ordinary _Cell_."
  },
  {
    "name": "CALLREF",
    "alias_of": "",
    "tlb": "#DB3C c:^Cell",
    "doc_category": "cont_basic",
    "doc_opcode": "DB3C",
    "doc_fift": "[ref] CALLREF",
    "doc_stack": "",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `CALLX`."
  },
  {
    "name": "GETGLOB",
    "alias_of": "",
    "tlb": "#F85_ k:(## 5) {1 <= k}",
    "doc_category": "app_global",
    "doc_opcode": "F85_k",
    "doc_fift": "[k] GETGLOB",
    "doc_stack": " - x",
    "doc_gas": 26,
    "doc_description": "Returns the `k`-th global variable for `1 <= k <= 31`.\nEquivalent to `c7 PUSHCTR` `[k] INDEXQ`."
  },
  {
    "name": "POPCTR",
    "alias_of": "",
    "tlb": "#ED5 i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "ED5i",
    "doc_fift": "c[i] POPCTR\nc[i] POP",
    "doc_stack": "x - ",
    "doc_gas": 26,
    "doc_description": "Pops a value `x` from the stack and stores it into control register `c(i)`, if supported in the current codepage. Notice that if a control register accepts only values of a specific type, a type-checking exception may occur."
  },
  {
    "name": "STSLICER",
    "alias_of": "",
    "tlb": "#CF16",
    "doc_category": "cell_build",
    "doc_opcode": "CF16",
    "doc_fift": "STSLICER",
    "doc_stack": "b s - b'",
    "doc_gas": 26,
    "doc_description": "Equivalent to `SWAP` `STSLICE`."
  },
  {
    "name": "GETPARAM",
    "alias_of": "",
    "tlb": "#F82 i:uint4",
    "doc_category": "app_config",
    "doc_opcode": "F82i",
    "doc_fift": "[i] GETPARAM",
    "doc_stack": " - x",
    "doc_gas": 26,
    "doc_description": "Returns the `i`-th parameter from the _Tuple_ provided at `c7` for `0 <= i <= 15`. Equivalent to `c7 PUSHCTR` `FIRST` `[i] INDEX`.\nIf one of these internal operations fails, throws an appropriate type checking or range checking exception."
  },
  {
    "name": "SETGLOB",
    "alias_of": "",
    "tlb": "#F87_ k:(## 5) {1 <= k}",
    "doc_category": "app_global",
    "doc_opcode": "F87_k",
    "doc_fift": "[k] SETGLOB",
    "doc_stack": "x - ",
    "doc_gas": null,
    "doc_description": "Assigns `x` to the `k`-th global variable for `1 <= k <= 31`.\nEquivalent to `c7 PUSHCTR` `SWAP` `k SETINDEXQ` `c7 POPCTR`."
  },
  {
    "name": "XCHG_0I_LONG",
    "alias_of": "",
    "tlb": "#11 ii:uint8",
    "doc_category": "stack_basic",
    "doc_opcode": "11ii",
    "doc_fift": "s0 [ii] s() XCHG",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Interchanges `s0` with `s[ii]`, `0 <= ii <= 255`."
  },
  {
    "name": "LDREF",
    "alias_of": "",
    "tlb": "#D4",
    "doc_category": "cell_parse",
    "doc_opcode": "D4",
    "doc_fift": "LDREF",
    "doc_stack": "s - c s'",
    "doc_gas": 18,
    "doc_description": "Loads a cell reference `c` from `s`."
  },
  {
    "name": "THROWIFNOT_SHORT",
    "alias_of": "",
    "tlb": "#F2A_ n:uint6",
    "doc_category": "exceptions",
    "doc_opcode": "F2A_n",
    "doc_fift": "[n] THROWIFNOT",
    "doc_stack": "f - ",
    "doc_gas": null,
    "doc_description": "Throws exception `0 <= n <= 63` with parameter zero only if integer `f=0`."
  },
  {
    "name": "ROTREV",
    "alias_of": "",
    "tlb": "#59",
    "doc_category": "stack_complex",
    "doc_opcode": "59",
    "doc_fift": "ROTREV\n-ROT",
    "doc_stack": "a b c - c a b",
    "doc_gas": 18,
    "doc_description": "Equivalent to `2 1 BLKSWAP` or to `s2 s2 XCHG2`."
  },
  {
    "name": "INC",
    "alias_of": "",
    "tlb": "#A4",
    "doc_category": "arithm_basic",
    "doc_opcode": "A4",
    "doc_fift": "INC",
    "doc_stack": "x - x+1",
    "doc_gas": 18,
    "doc_description": "Equivalent to `1 ADDCONST`."
  },
  {
    "name": "THROWIF_SHORT",
    "alias_of": "",
    "tlb": "#F26_ n:uint6",
    "doc_category": "exceptions",
    "doc_opcode": "F26_n",
    "doc_fift": "[n] THROWIF",
    "doc_stack": "f - ",
    "doc_gas": null,
    "doc_description": "Throws exception `0 <= n <= 63` with  parameter zero only if integer `f!=0`."
  },
  {
    "name": "HASHSU",
    "alias_of": "",
    "tlb": "#F901",
    "doc_category": "app_crypto",
    "doc_opcode": "F901",
    "doc_fift": "HASHSU",
    "doc_stack": "s - x",
    "doc_gas": 526,
    "doc_description": "Computes the hash of a _Slice_ `s` and returns it as a 256-bit unsigned integer `x`. The result is the same as if an ordinary cell containing only data and references from `s` had been created and its hash computed by `HASHCU`."
  },
  {
    "name": "GEQ",
    "alias_of": "",
    "tlb": "#BE",
    "doc_category": "compare_int",
    "doc_opcode": "BE",
    "doc_fift": "GEQ",
    "doc_stack": "x y - x>=y",
    "doc_gas": 18,
    "doc_description": "Equivalent to `LESS` `NOT`."
  },
  {
    "name": "LDSLICEX",
    "alias_of": "",
    "tlb": "#D718",
    "doc_category": "cell_parse",
    "doc_opcode": "D718",
    "doc_fift": "LDSLICEX",
    "doc_stack": "s l - s'' s'",
    "doc_gas": 26,
    "doc_description": "Loads the first `0 <= l <= 1023` bits from _Slice_ `s` into a separate _Slice_ `s''`, returning the remainder of `s` as `s'`."
  },
  {
    "name": "ACCEPT",
    "alias_of": "",
    "tlb": "#F800",
    "doc_category": "app_gas",
    "doc_opcode": "F800",
    "doc_fift": "ACCEPT",
    "doc_stack": "-",
    "doc_gas": 26,
    "doc_description": "Sets current gas limit `g_l` to its maximal allowed value `g_m`, and resets the gas credit `g_c` to zero, decreasing the value of `g_r` by `g_c` in the process.\nIn other words, the current smart contract agrees to buy some gas to finish the current transaction. This action is required to process external messages, which bring no value (hence no gas) with themselves."
  },
  {
    "name": "CHKSIGNU",
    "alias_of": "",
    "tlb": "#F910",
    "doc_category": "app_crypto",
    "doc_opcode": "F910",
    "doc_fift": "CHKSIGNU",
    "doc_stack": "h s k - ?",
    "doc_gas": 26,
    "doc_description": "Checks the Ed25519-signature `s` of a hash `h` (a 256-bit unsigned integer, usually computed as the hash of some data) using public key `k` (also represented by a 256-bit unsigned integer).\nThe signature `s` must be a _Slice_ containing at least 512 data bits; only the first 512 bits are used. The result is `-1` if the signature is valid, `0` otherwise.\nNotice that `CHKSIGNU` is equivalent to `ROT` `NEWC` `256 STU` `ENDC` `ROTREV` `CHKSIGNS`, i.e., to `CHKSIGNS` with the first argument `d` set to 256-bit _Slice_ containing `h`. Therefore, if `h` is computed as the hash of some data, these data are hashed _twice_, the second hashing occurring inside `CHKSIGNS`."
  },
  {
    "name": "XCHG2",
    "alias_of": "",
    "tlb": "#50 i:uint4 j:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "50ij",
    "doc_fift": "s[i] s[j] XCHG2",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Equivalent to `s1 s[i] XCHG` `s[j] XCHG0`."
  },
  {
    "name": "PLDREFIDX",
    "alias_of": "",
    "tlb": "#D74E_ n:uint2",
    "doc_category": "cell_parse",
    "doc_opcode": "D74E_n",
    "doc_fift": "[n] PLDREFIDX",
    "doc_stack": "s - c",
    "doc_gas": 26,
    "doc_description": "Returns the `n`-th cell reference of _Slice_ `s`, where `0 <= n <= 3`."
  },
  {
    "name": "SETCP",
    "alias_of": "",
    "tlb": "#FF nn:(#<= 239)",
    "doc_category": "codepage",
    "doc_opcode": "FFnn",
    "doc_fift": "[nn] SETCP",
    "doc_stack": "-",
    "doc_gas": 26,
    "doc_description": "Selects TVM codepage `0 <= nn < 240`. If the codepage is not supported, throws an invalid opcode exception."
  },
  {
    "name": "IFNOTRET",
    "alias_of": "",
    "tlb": "#DD",
    "doc_category": "cont_conditional",
    "doc_opcode": "DD",
    "doc_fift": "IFNOTRET\nIF:",
    "doc_stack": "f - ",
    "doc_gas": 18,
    "doc_description": "Performs a `RET`, but only if integer `f` is zero."
  },
  {
    "name": "LDGRAMS",
    "alias_of": "",
    "tlb": "#FA00",
    "doc_category": "app_currency",
    "doc_opcode": "FA00",
    "doc_fift": "LDGRAMS\nLDVARUINT16",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads (deserializes) a `Gram` or `VarUInteger 16` amount from _Slice_ `s`, and returns the amount as _Integer_ `x` along with the remainder `s'` of `s`. The expected serialization of `x` consists of a 4-bit unsigned big-endian integer `l`, followed by an `8l`-bit unsigned big-endian representation of `x`.\nThe net effect is approximately equivalent to `4 LDU` `SWAP` `3 LSHIFT#` `LDUX`."
  },
  {
    "name": "PUSHCTR",
    "alias_of": "",
    "tlb": "#ED4 i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "ED4i",
    "doc_fift": "c[i] PUSHCTR\nc[i] PUSH",
    "doc_stack": "- x",
    "doc_gas": 26,
    "doc_description": "Pushes the current value of control register `c(i)`. If the control register is not supported in the current codepage, or if it does not have a value, an exception is triggered."
  },
  {
    "name": "STREF",
    "alias_of": "",
    "tlb": "#CC",
    "doc_category": "cell_build",
    "doc_opcode": "CC",
    "doc_fift": "STREF",
    "doc_stack": "c b - b'",
    "doc_gas": 18,
    "doc_description": "Stores a reference to _Cell_ `c` into _Builder_ `b`."
  },
  {
    "name": "CALLDICT",
    "alias_of": "",
    "tlb": "#F0 n:uint8",
    "doc_category": "cont_dict",
    "doc_opcode": "F0nn",
    "doc_fift": "[nn] CALL\n[nn] CALLDICT",
    "doc_stack": "- nn",
    "doc_gas": 0,
    "doc_description": "Calls the continuation in `c3`, pushing integer `0 <= nn <= 255` into its stack as an argument.\nApproximately equivalent to `[nn] PUSHINT` `c3 PUSHCTR` `EXECUTE`."
  },
  {
    "name": "STGRAMS",
    "alias_of": "",
    "tlb": "#FA02",
    "doc_category": "app_currency",
    "doc_opcode": "FA02",
    "doc_fift": "STGRAMS\nSTVARUINT16",
    "doc_stack": "b x - b'",
    "doc_gas": 26,
    "doc_description": "Stores (serializes) an _Integer_ `x` in the range `0...2^120-1` into _Builder_ `b`, and returns the resulting _Builder_ `b'`. The serialization of `x` consists of a 4-bit unsigned big-endian integer `l`, which is the smallest integer `l>=0`, such that `x<2^(8l)`, followed by an `8l`-bit unsigned big-endian representation of `x`. If `x` does not belong to the supported range, a range check exception is thrown."
  },
  {
    "name": "XCHG_IJ",
    "alias_of": "",
    "tlb": "#10 i:(## 4) j:(## 4) {1 <= i} {i + 1 <= j}",
    "doc_category": "stack_basic",
    "doc_opcode": "10ij",
    "doc_fift": "s[i] s[j] XCHG",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Interchanges `s[i]` with `s[j]`, `1 <= i < j <= 15`."
  },
  {
    "name": "PUSHCONT",
    "alias_of": "",
    "tlb": "#8F_ r:(## 2) xx:(## 7) c:(r * ^Cell) ssss:((8 * xx) * Bit)",
    "doc_category": "const_data",
    "doc_opcode": "8F_rxxcccc",
    "doc_fift": "[builder] PUSHCONT\n[builder] CONT",
    "doc_stack": "- c",
    "doc_gas": 26,
    "doc_description": "Pushes a continuation made from `builder`.\n_Details:_ Pushes the simple ordinary continuation `cccc` made from the first `0 <= r <= 3` references and the first `0 <= xx <= 127` bytes of `cc.code`."
  },
  {
    "name": "BLKDROP2",
    "alias_of": "",
    "tlb": "#6C i:(## 4) j:uint4 {1 <= i}",
    "doc_category": "stack_complex",
    "doc_opcode": "6Cij",
    "doc_fift": "[i] [j] BLKDROP2",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Drops `i` stack elements under the top `j` elements.\n`1 <= i <= 15`, `0 <= j <= 15`\nEquivalent to `[i+j] 0 REVERSE` `[i] BLKDROP` `[j] 0 REVERSE`."
  },
  {
    "name": "PUSHPOW2",
    "alias_of": "",
    "tlb": "#83 xx:uint8",
    "doc_category": "const_int",
    "doc_opcode": "83xx",
    "doc_fift": "[xx+1] PUSHPOW2",
    "doc_stack": "- 2^(xx+1)",
    "doc_gas": 26,
    "doc_description": "(Quietly) pushes `2^(xx+1)` for `0 <= xx <= 255`.\n`2^256` is a `NaN`."
  },
  {
    "name": "PUSHINT_8",
    "alias_of": "",
    "tlb": "#80 xx:int8",
    "doc_category": "const_int",
    "doc_opcode": "80xx",
    "doc_fift": "[xx] PUSHINT\n[xx] INT",
    "doc_stack": "- xx",
    "doc_gas": 26,
    "doc_description": "Pushes integer `xx`. `-128 <= xx <= 127`."
  },
  {
    "name": "STDICT",
    "alias_of": "",
    "tlb": "#F400",
    "doc_category": "dict_serial",
    "doc_opcode": "F400",
    "doc_fift": "STDICT\nSTOPTREF",
    "doc_stack": "D b - b'",
    "doc_gas": 26,
    "doc_description": "Stores dictionary `D` into _Builder_ `b`, returning the resulting _Builder_ `b'`.\nIn other words, if `D` is a cell, performs `STONE` and `STREF`; if `D` is _Null_, performs `NIP` and `STZERO`; otherwise throws a type checking exception."
  },
  {
    "name": "EQINT",
    "alias_of": "",
    "tlb": "#C0 yy:int8",
    "doc_category": "compare_int",
    "doc_opcode": "C0yy",
    "doc_fift": "[yy] EQINT",
    "doc_stack": "x - x=yy",
    "doc_gas": 26,
    "doc_description": "Returns `-1` if `x=yy`, `0` otherwise.\n`-2^7 <= yy < 2^7`."
  },
  {
    "name": "BLKDROP",
    "alias_of": "",
    "tlb": "#5F0 i:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "5F0i",
    "doc_fift": "[i] BLKDROP",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Equivalent to `DROP` performed `i` times."
  },
  {
    "name": "LDDICT",
    "alias_of": "",
    "tlb": "#F404",
    "doc_category": "dict_serial",
    "doc_opcode": "F404",
    "doc_fift": "LDDICT\nLDOPTREF",
    "doc_stack": "s - D s'",
    "doc_gas": 26,
    "doc_description": "Loads (parses) a dictionary `D` from _Slice_ `s`, and returns the remainder of `s` as `s'`. May be applied to dictionaries or to values of arbitrary `(^Y)?` types."
  },
  {
    "name": "ROT",
    "alias_of": "",
    "tlb": "#58",
    "doc_category": "stack_complex",
    "doc_opcode": "58",
    "doc_fift": "ROT",
    "doc_stack": "a b c - b c a",
    "doc_gas": 18,
    "doc_description": "Equivalent to `1 2 BLKSWAP` or to `s2 s1 XCHG2`."
  },
  {
    "name": "SBITS",
    "alias_of": "",
    "tlb": "#D749",
    "doc_category": "cell_parse",
    "doc_opcode": "D749",
    "doc_fift": "SBITS",
    "doc_stack": "s - l",
    "doc_gas": 26,
    "doc_description": "Returns the number of data bits in _Slice_ `s`."
  },
  {
    "name": "PUXC",
    "alias_of": "",
    "tlb": "#52 i:uint4 j:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "52ij",
    "doc_fift": "s[i] s[j-1] PUXC",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Equivalent to `s[i] PUSH` `SWAP` `s[j] XCHG0`."
  },
  {
    "name": "AND",
    "alias_of": "",
    "tlb": "#B0",
    "doc_category": "arithm_logical",
    "doc_opcode": "B0",
    "doc_fift": "AND",
    "doc_stack": "x y - x&y",
    "doc_gas": 18,
    "doc_description": "Bitwise and of two signed integers `x` and `y`, sign-extended to infinity."
  },
  {
    "name": "PLDU",
    "alias_of": "",
    "tlb": "#D70B cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D70Bcc",
    "doc_fift": "[cc+1] PLDU",
    "doc_stack": "s - x",
    "doc_gas": 34,
    "doc_description": "Preloads an unsigned `cc+1`-bit integer from `s`."
  },
  {
    "name": "IFELSE",
    "alias_of": "",
    "tlb": "#E2",
    "doc_category": "cont_conditional",
    "doc_opcode": "E2",
    "doc_fift": "IFELSE",
    "doc_stack": "f c c' - ",
    "doc_gas": 18,
    "doc_description": "If integer `f` is non-zero, executes `c`, otherwise executes `c'`. Equivalent to `CONDSELCHK` `EXECUTE`."
  },
  {
    "name": "STI",
    "alias_of": "",
    "tlb": "#CA cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CAcc",
    "doc_fift": "[cc+1] STI",
    "doc_stack": "x b - b'",
    "doc_gas": 26,
    "doc_description": "Stores a signed `cc+1`-bit integer `x` into _Builder_ `b` for `0 <= cc <= 255`, throws a range check exception if `x` does not fit into `cc+1` bits."
  },
  {
    "name": "ADD",
    "alias_of": "",
    "tlb": "#A0",
    "doc_category": "arithm_basic",
    "doc_opcode": "A0",
    "doc_fift": "ADD",
    "doc_stack": "x y - x+y",
    "doc_gas": 18,
    "doc_description": ""
  },
  {
    "name": "BLKSWAP",
    "alias_of": "",
    "tlb": "#55 i:uint4 j:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "55ij",
    "doc_fift": "[i+1] [j+1] BLKSWAP",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Permutes two blocks `s[j+i+1] ... s[j+1]` and `s[j] ... s0`.\n`0 <= i,j <= 15`\nEquivalent to `[i+1] [j+1] REVERSE` `[j+1] 0 REVERSE` `[i+j+2] 0 REVERSE`."
  },
  {
    "name": "THROWIF",
    "alias_of": "",
    "tlb": "#F2D4_ n:uint11",
    "doc_category": "exceptions",
    "doc_opcode": "F2D4_n",
    "doc_fift": "[n] THROWIF",
    "doc_stack": "f - ",
    "doc_gas": null,
    "doc_description": "For `0 <= n < 2^11`, an encoding of `[n] THROWIF` for larger values of `n`."
  },
  {
    "name": "IFJMPREF",
    "alias_of": "",
    "tlb": "#E302 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E302",
    "doc_fift": "[ref] IFJMPREF",
    "doc_stack": "f - ",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `IFJMP`."
  },
  {
    "name": "SUB",
    "alias_of": "",
    "tlb": "#A1",
    "doc_category": "arithm_basic",
    "doc_opcode": "A1",
    "doc_fift": "SUB",
    "doc_stack": "x y - x-y",
    "doc_gas": 18,
    "doc_description": ""
  },
  {
    "name": "XCHG3",
    "alias_of": "",
    "tlb": "#4 i:uint4 j:uint4 k:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "4ijk",
    "doc_fift": "s[i] s[j] s[k] XCHG3",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Equivalent to `s2 s[i] XCHG` `s1 s[j] XCHG` `s[k] XCHG0`."
  },
  {
    "name": "LDI",
    "alias_of": "",
    "tlb": "#D2 cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D2cc",
    "doc_fift": "[cc+1] LDI",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads (i.e., parses) a signed `cc+1`-bit integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s'`."
  },
  {
    "name": "SENDRAWMSG",
    "alias_of": "",
    "tlb": "#FB00",
    "doc_category": "app_actions",
    "doc_opcode": "FB00",
    "doc_fift": "SENDRAWMSG",
    "doc_stack": "c x - ",
    "doc_gas": 526,
    "doc_description": "Sends a raw message contained in _Cell `c`_, which should contain a correctly serialized object `Message X`, with the only exception that the source address is allowed to have dummy value `addr_none` (to be automatically replaced with the current smart-contract address), and `ihr_fee`, `fwd_fee`, `created_lt` and `created_at` fields can have arbitrary values (to be rewritten with correct values during the action phase of the current transaction). Integer parameter `x` contains the flags. Currently `x=0` is used for ordinary messages; `x=128` is used for messages that are to carry all the remaining balance of the current smart contract (instead of the value originally indicated in the message); `x=64` is used for messages that carry all the remaining value of the inbound message in addition to the value initially indicated in the new message (if bit 0 is not set, the gas fees are deducted from this amount); `x'=x+1` means that the sender wants to pay transfer fees separately; `x'=x+2` means that any errors arising while processing this message during the action phase should be ignored. Finally, `x'=x+32` means that the current account must be destroyed if its resulting balance is zero. This flag is usually employed together with `+128`."
  },
  {
    "name": "SDEQ",
    "alias_of": "",
    "tlb": "#C705",
    "doc_category": "compare_other",
    "doc_opcode": "C705",
    "doc_fift": "SDEQ",
    "doc_stack": "s s' - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether the data parts of `s` and `s'` coincide, equivalent to `SDLEXCMP` `ISZERO`."
  },
  {
    "name": "PUSH2",
    "alias_of": "",
    "tlb": "#53 i:uint4 j:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "53ij",
    "doc_fift": "s[i] s[j] PUSH2",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Equivalent to `s[i] PUSH` `s[j+1] PUSH`."
  },
  {
    "name": "ENDS",
    "alias_of": "",
    "tlb": "#D1",
    "doc_category": "cell_parse",
    "doc_opcode": "D1",
    "doc_fift": "ENDS",
    "doc_stack": "s - ",
    "doc_gas": null,
    "doc_description": "Removes a _Slice_ `s` from the stack, and throws an exception if it is not empty."
  },
  {
    "name": "POP_LONG",
    "alias_of": "",
    "tlb": "#57 ii:uint8",
    "doc_category": "stack_complex",
    "doc_opcode": "57ii",
    "doc_fift": "[ii] s() POP",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Pops the old `s0` value into the old `s[ii]`.\n`0 <= ii <= 255`"
  },
  {
    "name": "XCPU",
    "alias_of": "",
    "tlb": "#51 i:uint4 j:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "51ij",
    "doc_fift": "s[i] s[j] XCPU",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Equivalent to `s[i] XCHG0` `s[j] PUSH`."
  },
  {
    "name": "GTINT",
    "alias_of": "",
    "tlb": "#C2 yy:int8",
    "doc_category": "compare_int",
    "doc_opcode": "C2yy",
    "doc_fift": "[yy] GTINT\n[yy+1] GEQINT",
    "doc_stack": "x - x>yy",
    "doc_gas": 26,
    "doc_description": "Returns `-1` if `x>yy`, `0` otherwise.\n`-2^7 <= yy < 2^7`."
  },
  {
    "name": "SEMPTY",
    "alias_of": "",
    "tlb": "#C700",
    "doc_category": "compare_other",
    "doc_opcode": "C700",
    "doc_fift": "SEMPTY",
    "doc_stack": "s - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether a _Slice_ `s` is empty (i.e., contains no bits of data and no cell references)."
  },
  {
    "name": "TUPLE",
    "alias_of": "",
    "tlb": "#6F0 n:uint4",
    "doc_category": "tuple",
    "doc_opcode": "6F0n",
    "doc_fift": "[n] TUPLE",
    "doc_stack": "x_1 ... x_n - t",
    "doc_gas": null,
    "doc_description": "Creates a new _Tuple_ `t=(x_1, ... ,x_n)` containing `n` values `x_1`,..., `x_n`.\n`0 <= n <= 15`"
  },
  {
    "name": "PUSHSLICE_LONG",
    "alias_of": "",
    "tlb": "#8D r:(#<= 4) xx:(## 7) c:(r * ^Cell) ssss:((8 * xx + 6) * Bit)",
    "doc_category": "const_data",
    "doc_opcode": "8Drxxsssss",
    "doc_fift": "[slice] PUSHSLICE\n[slice] SLICE",
    "doc_stack": "- s",
    "doc_gas": 28,
    "doc_description": "Pushes the slice `slice` into the stack.\n_Details:_ Pushes the subslice of `cc.code` consisting of `0 <= r <= 4` references and up to `8xx+6` bits of data, with `0 <= xx <= 127`.\nA completion tag is assumed."
  },
  {
    "name": "SDSKIPFIRST",
    "alias_of": "",
    "tlb": "#D721",
    "doc_category": "cell_parse",
    "doc_opcode": "D721",
    "doc_fift": "SDSKIPFIRST",
    "doc_stack": "s l - s'",
    "doc_gas": 26,
    "doc_description": "Returns all but the first `0 <= l <= 1023` bits of `s`. It is equivalent to `LDSLICEX` `NIP`."
  },
  {
    "name": "NULLSWAPIFNOT",
    "alias_of": "",
    "tlb": "#6FA1",
    "doc_category": "tuple",
    "doc_opcode": "6FA1",
    "doc_fift": "NULLSWAPIFNOT",
    "doc_stack": "x - x or null x",
    "doc_gas": 26,
    "doc_description": "Pushes a _Null_ under the topmost _Integer_ `x`, but only if `x=0`. May be used for stack alignment after quiet primitives such as `PLDUXQ`."
  },
  {
    "name": "IF",
    "alias_of": "",
    "tlb": "#DE",
    "doc_category": "cont_conditional",
    "doc_opcode": "DE",
    "doc_fift": "IF",
    "doc_stack": "f c - ",
    "doc_gas": 18,
    "doc_description": "Performs `EXECUTE` for `c` (i.e., _executes_ `c`), but only if integer `f` is non-zero. Otherwise simply discards both values."
  },
  {
    "name": "HASHCU",
    "alias_of": "",
    "tlb": "#F900",
    "doc_category": "app_crypto",
    "doc_opcode": "F900",
    "doc_fift": "HASHCU",
    "doc_stack": "c - x",
    "doc_gas": 26,
    "doc_description": "Computes the representation hash of a _Cell_ `c` and returns it as a 256-bit unsigned integer `x`. Useful for signing and checking signatures of arbitrary entities represented by a tree of cells."
  },
  {
    "name": "NULL",
    "alias_of": "",
    "tlb": "#6D",
    "doc_category": "tuple",
    "doc_opcode": "6D",
    "doc_fift": "NULL\nPUSHNULL",
    "doc_stack": " - null",
    "doc_gas": 18,
    "doc_description": "Pushes the only value of type _Null_."
  },
  {
    "name": "PUSHPOW2DEC",
    "alias_of": "",
    "tlb": "#84 xx:uint8",
    "doc_category": "const_int",
    "doc_opcode": "84xx",
    "doc_fift": "[xx+1] PUSHPOW2DEC",
    "doc_stack": "- 2^(xx+1)-1",
    "doc_gas": 26,
    "doc_description": "Pushes `2^(xx+1)-1` for `0 <= xx <= 255`."
  },
  {
    "name": "PUXCPU",
    "alias_of": "",
    "tlb": "#545 i:uint4 j:uint4 k:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "545ijk",
    "doc_fift": "s[i] s[j-1] s[k-1] PUXCPU",
    "doc_stack": "",
    "doc_gas": 34,
    "doc_description": "Equivalent to `s[i] s[j-1] PUXC` `s[k] PUSH`."
  },
  {
    "name": "NEGATE",
    "alias_of": "",
    "tlb": "#A3",
    "doc_category": "arithm_basic",
    "doc_opcode": "A3",
    "doc_fift": "NEGATE",
    "doc_stack": "x - -x",
    "doc_gas": 18,
    "doc_description": "Equivalent to `-1 MULCONST` or to `ZERO SUBR`.\nNotice that it triggers an integer overflow exception if `x=-2^256`."
  },
  {
    "name": "MUL",
    "alias_of": "",
    "tlb": "#A8",
    "doc_category": "arithm_basic",
    "doc_opcode": "A8",
    "doc_fift": "MUL",
    "doc_stack": "x y - x*y",
    "doc_gas": 18,
    "doc_description": ""
  },
  {
    "name": "THROWANY",
    "alias_of": "",
    "tlb": "#F2F0",
    "doc_category": "exceptions",
    "doc_opcode": "F2F0",
    "doc_fift": "THROWANY",
    "doc_stack": "n - 0 n",
    "doc_gas": 76,
    "doc_description": "Throws exception `0 <= n < 2^16` with parameter zero.\nApproximately equivalent to `ZERO` `SWAP` `THROWARGANY`."
  },
  {
    "name": "XC2PU",
    "alias_of": "",
    "tlb": "#541 i:uint4 j:uint4 k:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "541ijk",
    "doc_fift": "s[i] s[j] s[k] XC2PU",
    "doc_stack": "",
    "doc_gas": 34,
    "doc_description": "Equivalent to `s[i] s[j] XCHG2` `s[k] PUSH`."
  },
  {
    "name": "ISNULL",
    "alias_of": "",
    "tlb": "#6E",
    "doc_category": "tuple",
    "doc_opcode": "6E",
    "doc_fift": "ISNULL",
    "doc_stack": "x - ?",
    "doc_gas": 18,
    "doc_description": "Checks whether `x` is a _Null_, and returns `-1` or `0` accordingly."
  },
  {
    "name": "OR",
    "alias_of": "",
    "tlb": "#B1",
    "doc_category": "arithm_logical",
    "doc_opcode": "B1",
    "doc_fift": "OR",
    "doc_stack": "x y - x|y",
    "doc_gas": 18,
    "doc_description": "Bitwise or of two integers."
  },
  {
    "name": "DICTUGET",
    "alias_of": "",
    "tlb": "#F40E",
    "doc_category": "dict_get",
    "doc_opcode": "F40E",
    "doc_fift": "DICTUGET",
    "doc_stack": "i D n - x -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTIGET`, but with _unsigned_ (big-endian) `n`-bit _Integer_ `i` used as a key."
  },
  {
    "name": "REWRITESTDADDR",
    "alias_of": "",
    "tlb": "#FA44",
    "doc_category": "app_addr",
    "doc_opcode": "FA44",
    "doc_fift": "REWRITESTDADDR",
    "doc_stack": "s - x y",
    "doc_gas": 26,
    "doc_description": "Parses _Slice_ `s` containing a valid `MsgAddressInt` (usually a `msg_addr_std`), applies rewriting from the `anycast` (if present) to the same-length prefix of the address, and returns both the workchain `x` and the 256-bit address `y` as integers. If the address is not 256-bit, or if `s` is not a valid serialization of `MsgAddressInt`, throws a cell deserialization exception."
  },
  {
    "name": "GREATER",
    "alias_of": "",
    "tlb": "#BC",
    "doc_category": "compare_int",
    "doc_opcode": "BC",
    "doc_fift": "GREATER",
    "doc_stack": "x y - x>y",
    "doc_gas": 18,
    "doc_description": ""
  },
  {
    "name": "DROP2",
    "alias_of": "",
    "tlb": "#5B",
    "doc_category": "stack_complex",
    "doc_opcode": "5B",
    "doc_fift": "DROP2\n2DROP",
    "doc_stack": "a b - ",
    "doc_gas": 18,
    "doc_description": "Equivalent to `DROP` `DROP`."
  },
  {
    "name": "XCPUXC",
    "alias_of": "",
    "tlb": "#542 i:uint4 j:uint4 k:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "542ijk",
    "doc_fift": "s[i] s[j] s[k-1] XCPUXC",
    "doc_stack": "",
    "doc_gas": 34,
    "doc_description": "Equivalent to `s1 s[i] XCHG` `s[j] s[k-1] PUXC`."
  },
  {
    "name": "IFREFELSE",
    "alias_of": "",
    "tlb": "#E30D c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E30D",
    "doc_fift": "[ref] IFREFELSE",
    "doc_stack": "f c -",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `SWAP` `IFELSE`, with the optimization that the cell reference is not actually loaded into a _Slice_ and then converted into an ordinary _Continuation_ if `f=0`. Similar remarks apply to the next two primitives: cells are converted into continuations only when necessary."
  },
  {
    "name": "DIV",
    "alias_of": "",
    "tlb": "#A904",
    "doc_category": "arithm_div",
    "doc_opcode": "A904",
    "doc_fift": "DIV",
    "doc_stack": "x y - q",
    "doc_gas": 26,
    "doc_description": "`q=floor(x/y)`, `r=x-y*q`"
  },
  {
    "name": "PUSH_LONG",
    "alias_of": "",
    "tlb": "#56 ii:uint8",
    "doc_category": "stack_complex",
    "doc_opcode": "56ii",
    "doc_fift": "[ii] s() PUSH",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Pushes a copy of the old `s[ii]` into the stack.\n`0 <= ii <= 255`"
  },
  {
    "name": "PUSHSLICE",
    "alias_of": "",
    "tlb": "#8B x:(## 4) sss:((8 * x + 4) * Bit)",
    "doc_category": "const_data",
    "doc_opcode": "8Bxsss",
    "doc_fift": "[slice] PUSHSLICE\n[slice] SLICE",
    "doc_stack": "- s",
    "doc_gas": 22,
    "doc_description": "Pushes the slice `slice` into the stack.\n_Details:_ Pushes the (prefix) subslice of `cc.code` consisting of its first `8x+4` bits and no references (i.e., essentially a bitstring), where `0 <= x <= 15`.\nA completion tag is assumed, meaning that all trailing zeroes and the last binary one (if present) are removed from this bitstring.\nIf the original bitstring consists only of zeroes, an empty slice will be pushed."
  },
  {
    "name": "LESS",
    "alias_of": "",
    "tlb": "#B9",
    "doc_category": "compare_int",
    "doc_opcode": "B9",
    "doc_fift": "LESS",
    "doc_stack": "x y - x<y",
    "doc_gas": 18,
    "doc_description": "Returns `-1` if `x<y`, `0` otherwise."
  },
  {
    "name": "PUSH3",
    "alias_of": "",
    "tlb": "#547 i:uint4 j:uint4 k:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "547ijk",
    "doc_fift": "s[i] s[j] s[k] PUSH3",
    "doc_stack": "",
    "doc_gas": 34,
    "doc_description": "Equivalent to `s[i] PUSH` `s[j+1] s[k+1] PUSH2`."
  },
  {
    "name": "NOT",
    "alias_of": "",
    "tlb": "#B3",
    "doc_category": "arithm_logical",
    "doc_opcode": "B3",
    "doc_fift": "NOT",
    "doc_stack": "x - ~x",
    "doc_gas": 26,
    "doc_description": "Bitwise not of an integer."
  },
  {
    "name": "UNTIL",
    "alias_of": "",
    "tlb": "#E6",
    "doc_category": "cont_loops",
    "doc_opcode": "E6",
    "doc_fift": "UNTIL",
    "doc_stack": "c - ",
    "doc_gas": 18,
    "doc_description": "Executes continuation `c`, then pops an integer `x` from the resulting stack. If `x` is zero, performs another iteration of this loop. The actual implementation of this primitive involves an extraordinary continuation `ec_until` with its arguments set to the body of the loop (continuation `c`) and the original current continuation `cc`. This extraordinary continuation is then saved into the savelist of `c` as `c.c0` and the modified `c` is then executed. The other loop primitives are implemented similarly with the aid of suitable extraordinary continuations."
  },
  {
    "name": "THROWANYIFNOT",
    "alias_of": "",
    "tlb": "#F2F4",
    "doc_category": "exceptions",
    "doc_opcode": "F2F4",
    "doc_fift": "THROWANYIFNOT",
    "doc_stack": "n f - ",
    "doc_gas": null,
    "doc_description": "Throws exception `0 <= n<2^16` with parameter zero only if `f=0`."
  },
  {
    "name": "LESSINT",
    "alias_of": "",
    "tlb": "#C1 yy:int8",
    "doc_category": "compare_int",
    "doc_opcode": "C1yy",
    "doc_fift": "[yy] LESSINT\n[yy-1] LEQINT",
    "doc_stack": "x - x<yy",
    "doc_gas": 26,
    "doc_description": "Returns `-1` if `x<yy`, `0` otherwise.\n`-2^7 <= yy < 2^7`."
  },
  {
    "name": "NEQINT",
    "alias_of": "",
    "tlb": "#C3 yy:int8",
    "doc_category": "compare_int",
    "doc_opcode": "C3yy",
    "doc_fift": "[yy] NEQINT",
    "doc_stack": "x - x!=yy",
    "doc_gas": 26,
    "doc_description": "Returns `-1` if `x!=yy`, `0` otherwise.\n`-2^7 <= yy < 2^7`."
  },
  {
    "name": "SAMEALTSAVE",
    "alias_of": "",
    "tlb": "#EDFB",
    "doc_category": "cont_registers",
    "doc_opcode": "EDFB",
    "doc_fift": "SAMEALTSAVE",
    "doc_stack": "-",
    "doc_gas": 26,
    "doc_description": "Sets `c1` to `c0`, but first saves the old value of `c1` into the savelist of `c0`.\nEquivalent to `c1 SAVE` `SAMEALT`."
  },
  {
    "name": "STIX",
    "alias_of": "",
    "tlb": "#CF00",
    "doc_category": "cell_build",
    "doc_opcode": "CF00",
    "doc_fift": "STIX",
    "doc_stack": "x b l - b'",
    "doc_gas": 26,
    "doc_description": "Stores a signed `l`-bit integer `x` into `b` for `0 <= l <= 257`."
  },
  {
    "name": "LEQ",
    "alias_of": "",
    "tlb": "#BB",
    "doc_category": "compare_int",
    "doc_opcode": "BB",
    "doc_fift": "LEQ",
    "doc_stack": "x y - x<=y",
    "doc_gas": 18,
    "doc_description": ""
  },
  {
    "name": "LSHIFT",
    "alias_of": "",
    "tlb": "#AA cc:uint8",
    "doc_category": "arithm_logical",
    "doc_opcode": "AAcc",
    "doc_fift": "[cc+1] LSHIFT#",
    "doc_stack": "x - x*2^(cc+1)",
    "doc_gas": 26,
    "doc_description": "`0 <= cc <= 255`"
  },
  {
    "name": "WHILE",
    "alias_of": "",
    "tlb": "#E8",
    "doc_category": "cont_loops",
    "doc_opcode": "E8",
    "doc_fift": "WHILE",
    "doc_stack": "c' c - ",
    "doc_gas": 18,
    "doc_description": "Executes `c'` and pops an integer `x` from the resulting stack. If `x` is zero, exists the loop and transfers control to the original `cc`. If `x` is non-zero, executes `c`, and then begins a new iteration."
  },
  {
    "name": "SAVE",
    "alias_of": "",
    "tlb": "#EDA i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "EDAi",
    "doc_fift": "c[i] SAVE\nc[i] SAVECTR",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Saves the current value of `c(i)` into the savelist of continuation `c0`. If an entry for `c[i]` is already present in the savelist of `c0`, nothing is done. Equivalent to `c[i] PUSHCTR` `c[i] SETRETCTR`."
  },
  {
    "name": "SWAP2",
    "alias_of": "",
    "tlb": "#5A",
    "doc_category": "stack_complex",
    "doc_opcode": "5A",
    "doc_fift": "SWAP2\n2SWAP",
    "doc_stack": "a b c d - c d a b",
    "doc_gas": 18,
    "doc_description": "Equivalent to `2 2 BLKSWAP` or to `s3 s2 XCHG2`."
  },
  {
    "name": "EXECUTE",
    "alias_of": "",
    "tlb": "#D8",
    "doc_category": "cont_basic",
    "doc_opcode": "D8",
    "doc_fift": "EXECUTE\nCALLX",
    "doc_stack": "c - ",
    "doc_gas": 18,
    "doc_description": "_Calls_, or _executes_, continuation `c`."
  },
  {
    "name": "UNTUPLE",
    "alias_of": "",
    "tlb": "#6F2 n:uint4",
    "doc_category": "tuple",
    "doc_opcode": "6F2n",
    "doc_fift": "[n] UNTUPLE",
    "doc_stack": "t - x_1 ... x_n",
    "doc_gas": null,
    "doc_description": "Unpacks a _Tuple_ `t=(x_1,...,x_n)` of length equal to `0 <= n <= 15`.\nIf `t` is not a _Tuple_, or if `|t| != n`, a type check exception is thrown."
  },
  {
    "name": "MULRSHIFT",
    "alias_of": "",
    "tlb": "#A9B4 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A9B4tt",
    "doc_fift": "[tt+1] MULRSHIFT#",
    "doc_stack": "x y - floor(x*y/2^(tt+1))",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "DEBUG",
    "alias_of": "",
    "tlb": "#FE i:(#<= 14) j:(## 4)",
    "doc_category": "debug",
    "doc_opcode": "FEij",
    "doc_fift": "{i*16+j} DEBUG",
    "doc_stack": "-",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "IFREF",
    "alias_of": "",
    "tlb": "#E300 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E300",
    "doc_fift": "[ref] IFREF",
    "doc_stack": "f - ",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `IF`, with the optimization that the cell reference is not actually loaded into a _Slice_ and then converted into an ordinary _Continuation_ if `f=0`.\nGas consumption of this primitive depends on whether `f=0` and whether the reference was loaded before.\nSimilar remarks apply other primitives that accept a continuation as a reference."
  },
  {
    "name": "PUSHREFCONT",
    "alias_of": "",
    "tlb": "#8A c:^Cell",
    "doc_category": "const_data",
    "doc_opcode": "8A",
    "doc_fift": "[ref] PUSHREFCONT",
    "doc_stack": "- cont",
    "doc_gas": null,
    "doc_description": "Similar to `PUSHREFSLICE`, but makes a simple ordinary _Continuation_ out of the cell."
  },
  {
    "name": "INDEX",
    "alias_of": "",
    "tlb": "#6F1 k:uint4",
    "doc_category": "tuple",
    "doc_opcode": "6F1k",
    "doc_fift": "[k] INDEX",
    "doc_stack": "t - x",
    "doc_gas": 26,
    "doc_description": "Returns the `k`-th element of a _Tuple_ `t`.\n`0 <= k <= 15`."
  },
  {
    "name": "MULDIV",
    "alias_of": "",
    "tlb": "#A984",
    "doc_category": "arithm_div",
    "doc_opcode": "A984",
    "doc_fift": "MULDIV",
    "doc_stack": "x y z - q",
    "doc_gas": 26,
    "doc_description": "`q=floor(x*y/z)`"
  },
  {
    "name": "PUSHREFSLICE",
    "alias_of": "",
    "tlb": "#89 c:^Cell",
    "doc_category": "const_data",
    "doc_opcode": "89",
    "doc_fift": "[ref] PUSHREFSLICE",
    "doc_stack": "- s",
    "doc_gas": null,
    "doc_description": "Similar to `PUSHREF`, but converts the cell into a _Slice_."
  },
  {
    "name": "NEQ",
    "alias_of": "",
    "tlb": "#BD",
    "doc_category": "compare_int",
    "doc_opcode": "BD",
    "doc_fift": "NEQ",
    "doc_stack": "x y - x!=y",
    "doc_gas": 18,
    "doc_description": "Equivalent to `EQUAL` `NOT`."
  },
  {
    "name": "RSHIFT",
    "alias_of": "",
    "tlb": "#AB cc:uint8",
    "doc_category": "arithm_logical",
    "doc_opcode": "ABcc",
    "doc_fift": "[cc+1] RSHIFT#",
    "doc_stack": "x - floor(x/2^(cc+1))",
    "doc_gas": 18,
    "doc_description": "`0 <= cc <= 255`"
  },
  {
    "name": "DICTUSETREF",
    "alias_of": "",
    "tlb": "#F417",
    "doc_category": "dict_set",
    "doc_opcode": "F417",
    "doc_fift": "DICTUSETREF",
    "doc_stack": "c i D n - D'",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTISETREF`, but with `i` unsigned."
  },
  {
    "name": "STUX",
    "alias_of": "",
    "tlb": "#CF01",
    "doc_category": "cell_build",
    "doc_opcode": "CF01",
    "doc_fift": "STUX",
    "doc_stack": "x b l - b'",
    "doc_gas": 26,
    "doc_description": "Stores an unsigned `l`-bit integer `x` into `b` for `0 <= l <= 256`."
  },
  {
    "name": "ADDCONST",
    "alias_of": "",
    "tlb": "#A6 cc:int8",
    "doc_category": "arithm_basic",
    "doc_opcode": "A6cc",
    "doc_fift": "[cc] ADDCONST\n[cc] ADDINT\n[-cc] SUBCONST\n[-cc] SUBINT",
    "doc_stack": "x - x+cc",
    "doc_gas": 26,
    "doc_description": "`-128 <= cc <= 127`."
  },
  {
    "name": "DICTUSETB",
    "alias_of": "",
    "tlb": "#F443",
    "doc_category": "dict_set_builder",
    "doc_opcode": "F443",
    "doc_fift": "DICTUSETB",
    "doc_stack": "b i D n - D'",
    "doc_gas": 0,
    "doc_description": ""
  },
  {
    "name": "MIN",
    "alias_of": "",
    "tlb": "#B608",
    "doc_category": "arithm_logical",
    "doc_opcode": "B608",
    "doc_fift": "MIN",
    "doc_stack": "x y - x or y",
    "doc_gas": 26,
    "doc_description": "Computes the minimum of two integers `x` and `y`."
  },
  {
    "name": "TUCK",
    "alias_of": "",
    "tlb": "#66",
    "doc_category": "stack_complex",
    "doc_opcode": "66",
    "doc_fift": "TUCK",
    "doc_stack": "a b - b a b",
    "doc_gas": 18,
    "doc_description": "Equivalent to `SWAP` `OVER` or to `s1 s1 XCPU`."
  },
  {
    "name": "DUP2",
    "alias_of": "",
    "tlb": "#5C",
    "doc_category": "stack_complex",
    "doc_opcode": "5C",
    "doc_fift": "DUP2\n2DUP",
    "doc_stack": "a b - a b a b",
    "doc_gas": 18,
    "doc_description": "Equivalent to `s1 s0 PUSH2`."
  },
  {
    "name": "IFNOTJMP",
    "alias_of": "",
    "tlb": "#E1",
    "doc_category": "cont_conditional",
    "doc_opcode": "E1",
    "doc_fift": "IFNOTJMP",
    "doc_stack": "f c - ",
    "doc_gas": 18,
    "doc_description": "Jumps to `c` (similarly to `JMPX`), but only if `f` is zero."
  },
  {
    "name": "DICTGET",
    "alias_of": "",
    "tlb": "#F40A",
    "doc_category": "dict_get",
    "doc_opcode": "F40A",
    "doc_fift": "DICTGET",
    "doc_stack": "k D n - x -1 or 0",
    "doc_gas": 0,
    "doc_description": "Looks up key `k` (represented by a _Slice_, the first `0 <= n <= 1023` data bits of which are used as a key) in dictionary `D` of type `HashmapE(n,X)` with `n`-bit keys.\nOn success, returns the value found as a _Slice_ `x`."
  },
  {
    "name": "IFREFELSEREF",
    "alias_of": "",
    "tlb": "#E30F c1:^Cell c2:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E30F",
    "doc_fift": "[ref] [ref] IFREFELSEREF",
    "doc_stack": "f -",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `PUSHREFCONT` `IFELSE`."
  },
  {
    "name": "PU2XC",
    "alias_of": "",
    "tlb": "#546 i:uint4 j:uint4 k:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "546ijk",
    "doc_fift": "s[i] s[j-1] s[k-2] PU2XC",
    "doc_stack": "",
    "doc_gas": 34,
    "doc_description": "Equivalent to `s[i] PUSH` `SWAP` `s[j] s[k-1] PUXC`."
  },
  {
    "name": "DICTUGETREF",
    "alias_of": "",
    "tlb": "#F40F",
    "doc_category": "dict_get",
    "doc_opcode": "F40F",
    "doc_fift": "DICTUGETREF",
    "doc_stack": "i D n - c -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTIGETREF`, but with an unsigned `n`-bit _Integer_ key `i`."
  },
  {
    "name": "XCPU2",
    "alias_of": "",
    "tlb": "#543 i:uint4 j:uint4 k:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "543ijk",
    "doc_fift": "s[i] s[j] s[k] XCPU2",
    "doc_stack": "",
    "doc_gas": 34,
    "doc_description": "Equivalent to `s[i] XCHG0` `s[j] s[k] PUSH2`."
  },
  {
    "name": "NULLSWAPIFNOT2",
    "alias_of": "",
    "tlb": "#6FA5",
    "doc_category": "tuple",
    "doc_opcode": "6FA5",
    "doc_fift": "NULLSWAPIFNOT2",
    "doc_stack": "x - x or null null x",
    "doc_gas": 26,
    "doc_description": "Pushes two nulls under the topmost _Integer_ `x`, but only if `x=0`.\nEquivalent to `NULLSWAPIFNOT` `NULLSWAPIFNOT`."
  },
  {
    "name": "MULDIVR",
    "alias_of": "",
    "tlb": "#A985",
    "doc_category": "arithm_div",
    "doc_opcode": "A985",
    "doc_fift": "MULDIVR",
    "doc_stack": "x y z - q'",
    "doc_gas": 26,
    "doc_description": "`q'=round(x*y/z)`"
  },
  {
    "name": "IFELSEREF",
    "alias_of": "",
    "tlb": "#E30E c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E30E",
    "doc_fift": "[ref] IFELSEREF",
    "doc_stack": "f c -",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `IFELSE`."
  },
  {
    "name": "IFRET",
    "alias_of": "",
    "tlb": "#DC",
    "doc_category": "cont_conditional",
    "doc_opcode": "DC",
    "doc_fift": "IFRET\nIFNOT:",
    "doc_stack": "f - ",
    "doc_gas": 18,
    "doc_description": "Performs a `RET`, but only if integer `f` is non-zero. If `f` is a `NaN`, throws an integer overflow exception."
  },
  {
    "name": "IFNOT",
    "alias_of": "",
    "tlb": "#DF",
    "doc_category": "cont_conditional",
    "doc_opcode": "DF",
    "doc_fift": "IFNOT",
    "doc_stack": "f c - ",
    "doc_gas": 18,
    "doc_description": "Executes continuation `c`, but only if integer `f` is zero. Otherwise simply discards both values."
  },
  {
    "name": "GETGASFEE",
    "alias_of": "",
    "tlb": "#F836",
    "doc_category": "app_config",
    "doc_opcode": "F836",
    "doc_fift": "GETGASFEE",
    "doc_stack": "gas_used is_mc - price",
    "doc_gas": 0,
    "doc_description": "Calculates gas fee"
  },
  {
    "name": "REPEAT",
    "alias_of": "",
    "tlb": "#E4",
    "doc_category": "cont_loops",
    "doc_opcode": "E4",
    "doc_fift": "REPEAT",
    "doc_stack": "n c - ",
    "doc_gas": 18,
    "doc_description": "Executes continuation `c` `n` times, if integer `n` is non-negative. If `n>=2^31` or `n<-2^31`, generates a range check exception.\nNotice that a `RET` inside the code of `c` works as a `continue`, not as a `break`. One should use either alternative (experimental) loops or alternative `RETALT` (along with a `SETEXITALT` before the loop) to `break` out of a loop."
  },
  {
    "name": "BBITS",
    "alias_of": "",
    "tlb": "#CF31",
    "doc_category": "cell_build",
    "doc_opcode": "CF31",
    "doc_fift": "BBITS",
    "doc_stack": "b - x",
    "doc_gas": 26,
    "doc_description": "Returns the number of data bits already stored in _Builder_ `b`."
  },
  {
    "name": "RAWRESERVE",
    "alias_of": "",
    "tlb": "#FB02",
    "doc_category": "app_actions",
    "doc_opcode": "FB02",
    "doc_fift": "RAWRESERVE",
    "doc_stack": "x y - ",
    "doc_gas": 526,
    "doc_description": "Creates an output action which would reserve exactly `x` nanograms (if `y=0`), at most `x` nanograms (if `y=2`), or all but `x` nanograms (if `y=1` or `y=3`), from the remaining balance of the account. It is roughly equivalent to creating an outbound message carrying `x` nanograms (or `b-x` nanograms, where `b` is the remaining balance) to oneself, so that the subsequent output actions would not be able to spend more money than the remainder. Bit `+2` in `y` means that the external action does not fail if the specified amount cannot be reserved; instead, all remaining balance is reserved. Bit `+8` in `y` means `x:=-x` before performing any further actions. Bit `+4` in `y` means that `x` is increased by the original balance of the current account (before the compute phase), including all extra currencies, before performing any other checks and actions. Currently `x` must be a non-negative integer, and `y` must be in the range `0...15`."
  },
  {
    "name": "PUXC2",
    "alias_of": "",
    "tlb": "#544 i:uint4 j:uint4 k:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "544ijk",
    "doc_fift": "s[i] s[j-1] s[k-1] PUXC2",
    "doc_stack": "",
    "doc_gas": 34,
    "doc_description": "Equivalent to `s[i] PUSH` `s2 XCHG0` `s[j] s[k] XCHG2`."
  },
  {
    "name": "SETCONTCTR",
    "alias_of": "",
    "tlb": "#ED6 i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "ED6i",
    "doc_fift": "c[i] SETCONT\nc[i] SETCONTCTR",
    "doc_stack": "x c - c'",
    "doc_gas": 26,
    "doc_description": "Stores `x` into the savelist of continuation `c` as `c(i)`, and returns the resulting continuation `c'`. Almost all operations with continuations may be expressed in terms of `SETCONTCTR`, `POPCTR`, and `PUSHCTR`."
  },
  {
    "name": "STBR",
    "alias_of": "",
    "tlb": "#CF17",
    "doc_category": "cell_build",
    "doc_opcode": "CF17",
    "doc_fift": "STBR\nBCONCAT",
    "doc_stack": "b b' - b''",
    "doc_gas": 26,
    "doc_description": "Concatenates two builders.\nEquivalent to `SWAP` `STB`."
  },
  {
    "name": "SREFS",
    "alias_of": "",
    "tlb": "#D74A",
    "doc_category": "cell_parse",
    "doc_opcode": "D74A",
    "doc_fift": "SREFS",
    "doc_stack": "s - r",
    "doc_gas": 26,
    "doc_description": "Returns the number of references in _Slice_ `s`."
  },
  {
    "name": "DICTUSET",
    "alias_of": "",
    "tlb": "#F416",
    "doc_category": "dict_set",
    "doc_opcode": "F416",
    "doc_fift": "DICTUSET",
    "doc_stack": "x i D n - D'",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTISET`, but with `i` an _unsigned_ `n`-bit integer."
  },
  {
    "name": "COMMIT",
    "alias_of": "",
    "tlb": "#F80F",
    "doc_category": "app_gas",
    "doc_opcode": "F80F",
    "doc_fift": "COMMIT",
    "doc_stack": "-",
    "doc_gas": 26,
    "doc_description": "Commits the current state of registers `c4` (''persistent data'') and `c5` (''actions'') so that the current execution is considered ''successful'' with the saved values even if an exception is thrown later."
  },
  {
    "name": "MULCONST",
    "alias_of": "",
    "tlb": "#A7 cc:int8",
    "doc_category": "arithm_basic",
    "doc_opcode": "A7cc",
    "doc_fift": "[cc] MULCONST\n[cc] MULINT",
    "doc_stack": "x - x*cc",
    "doc_gas": 26,
    "doc_description": "`-128 <= cc <= 127`."
  },
  {
    "name": "THROWANYIF",
    "alias_of": "",
    "tlb": "#F2F2",
    "doc_category": "exceptions",
    "doc_opcode": "F2F2",
    "doc_fift": "THROWANYIF",
    "doc_stack": "n f - ",
    "doc_gas": null,
    "doc_description": "Throws exception `0 <= n < 2^16` with parameter zero only if `f!=0`."
  },
  {
    "name": "ADDRAND",
    "alias_of": "",
    "tlb": "#F815",
    "doc_category": "app_rnd",
    "doc_opcode": "F815",
    "doc_fift": "ADDRAND\nRANDOMIZE",
    "doc_stack": "x - ",
    "doc_gas": 26,
    "doc_description": "Mixes unsigned 256-bit _Integer_ `x` into the random seed `r` by setting the random seed to `Sha` of the concatenation of two 32-byte strings: the first with the big-endian representation of the old seed `r`, and the second with the big-endian representation of `x`."
  },
  {
    "name": "PUSHREF",
    "alias_of": "",
    "tlb": "#88 c:^Cell",
    "doc_category": "const_data",
    "doc_opcode": "88",
    "doc_fift": "[ref] PUSHREF",
    "doc_stack": "- c",
    "doc_gas": 18,
    "doc_description": "Pushes the reference `ref` into the stack.\n_Details:_ Pushes the first reference of `cc.code` into the stack as a _Cell_ (and removes this reference from the current continuation)."
  },
  {
    "name": "PLDDICT",
    "alias_of": "",
    "tlb": "#F405",
    "doc_category": "dict_serial",
    "doc_opcode": "F405",
    "doc_fift": "PLDDICT\nPLDOPTREF",
    "doc_stack": "s - D",
    "doc_gas": 26,
    "doc_description": "Preloads a dictionary `D` from _Slice_ `s`.\nApproximately equivalent to `LDDICT` `DROP`."
  },
  {
    "name": "CONFIGOPTPARAM",
    "alias_of": "",
    "tlb": "#F833",
    "doc_category": "app_config",
    "doc_opcode": "F833",
    "doc_fift": "CONFIGOPTPARAM",
    "doc_stack": "i - c^?",
    "doc_gas": 0,
    "doc_description": "Returns the value of the global configuration parameter with integer index `i` as a _Maybe Cell_ `c^?`.\nEquivalent to `CONFIGDICT` `DICTIGETOPTREF`."
  },
  {
    "name": "DEC",
    "alias_of": "",
    "tlb": "#A5",
    "doc_category": "arithm_basic",
    "doc_opcode": "A5",
    "doc_fift": "DEC",
    "doc_stack": "x - x-1",
    "doc_gas": 18,
    "doc_description": "Equivalent to `-1 ADDCONST`."
  },
  {
    "name": "THROW",
    "alias_of": "",
    "tlb": "#F2C4_ n:uint11",
    "doc_category": "exceptions",
    "doc_opcode": "F2C4_n",
    "doc_fift": "[n] THROW",
    "doc_stack": "- 0 nn",
    "doc_gas": 84,
    "doc_description": "For `0 <= n < 2^11`, an encoding of `[n] THROW` for larger values of `n`."
  },
  {
    "name": "TPUSH",
    "alias_of": "",
    "tlb": "#6F8C",
    "doc_category": "tuple",
    "doc_opcode": "6F8C",
    "doc_fift": "TPUSH\nCOMMA",
    "doc_stack": "t x - t'",
    "doc_gas": null,
    "doc_description": "Appends a value `x` to a _Tuple_ `t=(x_1,...,x_n)`, but only if the resulting _Tuple_ `t'=(x_1,...,x_n,x)` is of length at most 255. Otherwise throws a type check exception."
  },
  {
    "name": "GETFORWARDFEE",
    "alias_of": "",
    "tlb": "#F838",
    "doc_category": "app_config",
    "doc_opcode": "F838",
    "doc_fift": "GETFORWARDFEE",
    "doc_stack": "cells bits is_mc - price",
    "doc_gas": 0,
    "doc_description": "Calculates forward fee."
  },
  {
    "name": "REVERSE",
    "alias_of": "",
    "tlb": "#5E i:uint4 j:uint4",
    "doc_category": "stack_complex",
    "doc_opcode": "5Eij",
    "doc_fift": "[i+2] [j] REVERSE",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Reverses the order of `s[j+i+1] ... s[j]`."
  },
  {
    "name": "DICTUMIN",
    "alias_of": "",
    "tlb": "#F486",
    "doc_category": "dict_min",
    "doc_opcode": "F486",
    "doc_fift": "DICTUMIN",
    "doc_stack": "D n - x i -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTMIN`, but returns the key as an unsigned `n`-bit _Integer_ `i`."
  },
  {
    "name": "TLEN",
    "alias_of": "",
    "tlb": "#6F88",
    "doc_category": "tuple",
    "doc_opcode": "6F88",
    "doc_fift": "TLEN",
    "doc_stack": "t - n",
    "doc_gas": 26,
    "doc_description": "Returns the length of a _Tuple_."
  },
  {
    "name": "DICTUGETOPTREF",
    "alias_of": "",
    "tlb": "#F46B",
    "doc_category": "dict_mayberef",
    "doc_opcode": "F46B",
    "doc_fift": "DICTUGETOPTREF",
    "doc_stack": "i D n - c^?",
    "doc_gas": 0,
    "doc_description": "`DICTGETOPTREF`, but with `i` an unsigned `n`-bit integer. If the key `i` is out of range, also returns _Null_."
  },
  {
    "name": "DICTUDEL",
    "alias_of": "",
    "tlb": "#F45B",
    "doc_category": "dict_delete",
    "doc_opcode": "F45B",
    "doc_fift": "DICTUDEL",
    "doc_stack": "i D n - D' ?",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTIDEL`, but with `i` an unsigned `n`-bit integer."
  },
  {
    "name": "MOD",
    "alias_of": "",
    "tlb": "#A908",
    "doc_category": "arithm_div",
    "doc_opcode": "A908",
    "doc_fift": "MOD",
    "doc_stack": "x y - r",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "SDEMPTY",
    "alias_of": "",
    "tlb": "#C701",
    "doc_category": "compare_other",
    "doc_opcode": "C701",
    "doc_fift": "SDEMPTY",
    "doc_stack": "s - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether _Slice_ `s` has no bits of data."
  },
  {
    "name": "MODPOW2",
    "alias_of": "",
    "tlb": "#A938 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A938tt",
    "doc_fift": "[tt+1] MODPOW2#",
    "doc_stack": "x - x mod 2^(tt+1)",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "DICTUDELGET",
    "alias_of": "",
    "tlb": "#F466",
    "doc_category": "dict_delete",
    "doc_opcode": "F466",
    "doc_fift": "DICTUDELGET",
    "doc_stack": "i D n - D' x -1 or D 0",
    "doc_gas": 0,
    "doc_description": "`DICTDELGET`, but with `i` an unsigned `n`-bit integer."
  },
  {
    "name": "RAND",
    "alias_of": "",
    "tlb": "#F811",
    "doc_category": "app_rnd",
    "doc_opcode": "F811",
    "doc_fift": "RAND",
    "doc_stack": "y - z",
    "doc_gas": null,
    "doc_description": "Generates a new pseudo-random integer `z` in the range `0...y-1` (or `y...-1`, if `y<0`). More precisely, an unsigned random value `x` is generated as in `RAND256U`; then `z:=floor(x*y/2^256)` is computed.\nEquivalent to `RANDU256` `256 MULRSHIFT`."
  },
  {
    "name": "MAX",
    "alias_of": "",
    "tlb": "#B609",
    "doc_category": "arithm_logical",
    "doc_opcode": "B609",
    "doc_fift": "MAX",
    "doc_stack": "x y - x or y",
    "doc_gas": 26,
    "doc_description": "Computes the maximum of two integers `x` and `y`."
  },
  {
    "name": "LDSLICE",
    "alias_of": "",
    "tlb": "#D6 cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D6cc",
    "doc_fift": "[cc+1] LDSLICE",
    "doc_stack": "s - s'' s'",
    "doc_gas": 26,
    "doc_description": "Cuts the next `cc+1` bits of `s` into a separate _Slice_ `s''`."
  },
  {
    "name": "SKIPDICT",
    "alias_of": "",
    "tlb": "#F401",
    "doc_category": "dict_serial",
    "doc_opcode": "F401",
    "doc_fift": "SKIPDICT\nSKIPOPTREF",
    "doc_stack": "s - s'",
    "doc_gas": 26,
    "doc_description": "Equivalent to `LDDICT` `NIP`."
  },
  {
    "name": "RANDU256",
    "alias_of": "",
    "tlb": "#F810",
    "doc_category": "app_rnd",
    "doc_opcode": "F810",
    "doc_fift": "RANDU256",
    "doc_stack": "- x",
    "doc_gas": null,
    "doc_description": "Generates a new pseudo-random unsigned 256-bit _Integer_ `x`. The algorithm is as follows: if `r` is the old value of the random seed, considered as a 32-byte array (by constructing the big-endian representation of an unsigned 256-bit integer), then its `sha512(r)` is computed; the first 32 bytes of this hash are stored as the new value `r'` of the random seed, and the remaining 32 bytes are returned as the next random value `x`."
  },
  {
    "name": "COMPOSALT",
    "alias_of": "",
    "tlb": "#EDF1",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF1",
    "doc_fift": "COMPOSALT\nBOOLOR",
    "doc_stack": "c c' - c''",
    "doc_gas": 26,
    "doc_description": "Computes the alternative composition `compose1(c, c')`, which has the meaning of ''perform `c`, and, if not successful, perform `c'`'' (if `c` is a boolean circuit). Equivalent to `SWAP` `c1 SETCONT`."
  },
  {
    "name": "TRY",
    "alias_of": "",
    "tlb": "#F2FF",
    "doc_category": "exceptions",
    "doc_opcode": "F2FF",
    "doc_fift": "TRY",
    "doc_stack": "c c' - ",
    "doc_gas": 26,
    "doc_description": "Sets `c2` to `c'`, first saving the old value of `c2` both into the savelist of `c'` and into the savelist of the current continuation, which is stored into `c.c0` and `c'.c0`. Then runs `c` similarly to `EXECUTE`. If `c` does not throw any exceptions, the original value of `c2` is automatically restored on return from `c`. If an exception occurs, the execution is transferred to `c'`, but the original value of `c2` is restored in the process, so that `c'` can re-throw the exception by `THROWANY` if it cannot handle it by itself."
  },
  {
    "name": "THROW_SHORT",
    "alias_of": "",
    "tlb": "#F22_ n:uint6",
    "doc_category": "exceptions",
    "doc_opcode": "F22_n",
    "doc_fift": "[n] THROW",
    "doc_stack": " - 0 n",
    "doc_gas": 76,
    "doc_description": "Throws exception `0 <= n <= 63` with parameter zero.\nIn other words, it transfers control to the continuation in `c2`, pushing `0` and `n` into its stack, and discarding the old stack altogether."
  },
  {
    "name": "PLDI",
    "alias_of": "",
    "tlb": "#D70A cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D70Acc",
    "doc_fift": "[cc+1] PLDI",
    "doc_stack": "s - x",
    "doc_gas": 34,
    "doc_description": "Preloads a signed `cc+1`-bit integer from _Slice_ `s`."
  },
  {
    "name": "DICTSETB",
    "alias_of": "",
    "tlb": "#F441",
    "doc_category": "dict_set_builder",
    "doc_opcode": "F441",
    "doc_fift": "DICTSETB",
    "doc_stack": "b k D n - D'",
    "doc_gas": 0,
    "doc_description": ""
  },
  {
    "name": "SHA256U",
    "alias_of": "",
    "tlb": "#F902",
    "doc_category": "app_crypto",
    "doc_opcode": "F902",
    "doc_fift": "SHA256U",
    "doc_stack": "s - x",
    "doc_gas": 26,
    "doc_description": "Computes `Sha` of the data bits of _Slice_ `s`. If the bit length of `s` is not divisible by eight, throws a cell underflow exception. The hash value is returned as a 256-bit unsigned integer `x`."
  },
  {
    "name": "OVER2",
    "alias_of": "",
    "tlb": "#5D",
    "doc_category": "stack_complex",
    "doc_opcode": "5D",
    "doc_fift": "OVER2\n2OVER",
    "doc_stack": "a b c d - a b c d a b",
    "doc_gas": 18,
    "doc_description": "Equivalent to `s3 s2 PUSH2`."
  },
  {
    "name": "STVARINT16",
    "alias_of": "",
    "tlb": "#FA03",
    "doc_category": "app_currency",
    "doc_opcode": "FA03",
    "doc_fift": "STVARINT16",
    "doc_stack": "b x - b'",
    "doc_gas": 26,
    "doc_description": "Similar to `STVARUINT16`, but serializes a _signed_ _Integer_ `x` in the range `-2^119...2^119-1`."
  },
  {
    "name": "POW2",
    "alias_of": "",
    "tlb": "#AE",
    "doc_category": "arithm_logical",
    "doc_opcode": "AE",
    "doc_fift": "POW2",
    "doc_stack": "y - 2^y",
    "doc_gas": 18,
    "doc_description": "`0 <= y <= 1023`\nEquivalent to `ONE` `SWAP` `LSHIFT`."
  },
  {
    "name": "DICTUGETNEXT",
    "alias_of": "",
    "tlb": "#F47C",
    "doc_category": "dict_next",
    "doc_opcode": "F47C",
    "doc_fift": "DICTUGETNEXT",
    "doc_stack": "i D n - x' i' -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTGETNEXT`, but interprets all keys in dictionary `D` as big-endian unsigned `n`-bit integers, and computes the minimal key `i'` that is larger than _Integer_ `i` (which does not necessarily fit into `n` bits, and is not necessarily non-negative)."
  },
  {
    "name": "SETCONTVARARGS",
    "alias_of": "",
    "tlb": "#ED11",
    "doc_category": "cont_stack",
    "doc_opcode": "ED11",
    "doc_fift": "SETCONTVARARGS",
    "doc_stack": "x_1 x_2...x_r c r n - c'",
    "doc_gas": null,
    "doc_description": "Similar to `SETCONTARGS`, but with `0 <= r <= 255` and `-1 <= n <= 255` taken from the stack."
  },
  {
    "name": "SETCODE",
    "alias_of": "",
    "tlb": "#FB04",
    "doc_category": "app_actions",
    "doc_opcode": "FB04",
    "doc_fift": "SETCODE",
    "doc_stack": "c - ",
    "doc_gas": 526,
    "doc_description": "Creates an output action that would change this smart contract code to that given by _Cell_ `c`. Notice that this change will take effect only after the successful termination of the current run of the smart contract."
  },
  {
    "name": "GETORIGINALFWDFEE",
    "alias_of": "",
    "tlb": "#F83A",
    "doc_category": "app_config",
    "doc_opcode": "F83A",
    "doc_fift": "GETORIGINALFWDFEE",
    "doc_stack": "fwd_fee is_mc - orig_fwd_fee",
    "doc_gas": 0,
    "doc_description": "Calculate `fwd_fee * 2^16 / first_frac`. Can be used to get the original `fwd_fee` of the message."
  },
  {
    "name": "SREMPTY",
    "alias_of": "",
    "tlb": "#C702",
    "doc_category": "compare_other",
    "doc_opcode": "C702",
    "doc_fift": "SREMPTY",
    "doc_stack": "s - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether _Slice_ `s` has no references."
  },
  {
    "name": "CALLXARGS_VAR",
    "alias_of": "",
    "tlb": "#DB0 p:uint4",
    "doc_category": "cont_basic",
    "doc_opcode": "DB0p",
    "doc_fift": "[p] -1 CALLXARGS",
    "doc_stack": "c - ",
    "doc_gas": 26,
    "doc_description": "_Calls_ continuation `c` with `0 <= p <= 15` parameters, expecting an arbitrary number of return values."
  },
  {
    "name": "IFNOTJMPREF",
    "alias_of": "",
    "tlb": "#E303 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E303",
    "doc_fift": "[ref] IFNOTJMPREF",
    "doc_stack": "f - ",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `IFNOTJMP`."
  },
  {
    "name": "PLDSLICEX",
    "alias_of": "",
    "tlb": "#D719",
    "doc_category": "cell_parse",
    "doc_opcode": "D719",
    "doc_fift": "PLDSLICEX",
    "doc_stack": "s l - s''",
    "doc_gas": 26,
    "doc_description": "Returns the first `0 <= l <= 1023` bits of `s` as `s''`."
  },
  {
    "name": "SETGASLIMIT",
    "alias_of": "",
    "tlb": "#F801",
    "doc_category": "app_gas",
    "doc_opcode": "F801",
    "doc_fift": "SETGASLIMIT",
    "doc_stack": "g - ",
    "doc_gas": 26,
    "doc_description": "Sets current gas limit `g_l` to the minimum of `g` and `g_m`, and resets the gas credit `g_c` to zero. If the gas consumed so far (including the present instruction) exceeds the resulting value of `g_l`, an (unhandled) out of gas exception is thrown before setting new gas limits. Notice that `SETGASLIMIT` with an argument `g >= 2^63-1` is equivalent to `ACCEPT`."
  },
  {
    "name": "INDEXVAR",
    "alias_of": "",
    "tlb": "#6F81",
    "doc_category": "tuple",
    "doc_opcode": "6F81",
    "doc_fift": "INDEXVAR",
    "doc_stack": "t k - x",
    "doc_gas": 26,
    "doc_description": "Similar to `k INDEX`, but with `0 <= k <= 254` taken from the stack."
  },
  {
    "name": "STZEROES",
    "alias_of": "",
    "tlb": "#CF40",
    "doc_category": "cell_build",
    "doc_opcode": "CF40",
    "doc_fift": "STZEROES",
    "doc_stack": "b n - b'",
    "doc_gas": 26,
    "doc_description": "Stores `n` binary zeroes into _Builder_ `b`."
  },
  {
    "name": "LDUX",
    "alias_of": "",
    "tlb": "#D701",
    "doc_category": "cell_parse",
    "doc_opcode": "D701",
    "doc_fift": "LDUX",
    "doc_stack": "s l - x s'",
    "doc_gas": 26,
    "doc_description": "Loads an unsigned `l`-bit integer `x` from (the first `l` bits of) `s`, with `0 <= l <= 256`."
  },
  {
    "name": "DIVC",
    "alias_of": "",
    "tlb": "#A906",
    "doc_category": "arithm_div",
    "doc_opcode": "A906",
    "doc_fift": "DIVC",
    "doc_stack": "x y - q''",
    "doc_gas": 26,
    "doc_description": "`q''=ceil(x/y)`, `r''=x-y*q''`"
  },
  {
    "name": "STSLICE",
    "alias_of": "",
    "tlb": "#CE",
    "doc_category": "cell_build",
    "doc_opcode": "CE",
    "doc_fift": "STSLICE",
    "doc_stack": "s b - b'",
    "doc_gas": 18,
    "doc_description": "Stores _Slice_ `s` into _Builder_ `b`."
  },
  {
    "name": "CALLDICT_LONG",
    "alias_of": "",
    "tlb": "#F12_ n:uint14",
    "doc_category": "cont_dict",
    "doc_opcode": "F12_n",
    "doc_fift": "[n] CALL\n[n] CALLDICT",
    "doc_stack": "- n",
    "doc_gas": 0,
    "doc_description": "For `0 <= n < 2^14`, an encoding of `[n] CALL` for larger values of `n`."
  },
  {
    "name": "SPLIT",
    "alias_of": "",
    "tlb": "#D736",
    "doc_category": "cell_parse",
    "doc_opcode": "D736",
    "doc_fift": "SPLIT",
    "doc_stack": "s l r - s' s''",
    "doc_gas": 26,
    "doc_description": "Splits the first `0 <= l <= 1023` data bits and first `0 <= r <= 4` references from `s` into `s'`, returning the remainder of `s` as `s''`."
  },
  {
    "name": "REWRITEVARADDR",
    "alias_of": "",
    "tlb": "#FA46",
    "doc_category": "app_addr",
    "doc_opcode": "FA46",
    "doc_fift": "REWRITEVARADDR",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "A variant of `REWRITESTDADDR` that returns the (rewritten) address as a _Slice_ `s`, even if it is not exactly 256 bit long (represented by a `msg_addr_var`)."
  },
  {
    "name": "CHKSIGNS",
    "alias_of": "",
    "tlb": "#F911",
    "doc_category": "app_crypto",
    "doc_opcode": "F911",
    "doc_fift": "CHKSIGNS",
    "doc_stack": "d s k - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether `s` is a valid Ed25519-signature of the data portion of _Slice_ `d` using public key `k`, similarly to `CHKSIGNU`. If the bit length of _Slice_ `d` is not divisible by eight, throws a cell underflow exception. The verification of Ed25519 signatures is the standard one, with `Sha` used to reduce `d` to the 256-bit number that is actually signed."
  },
  {
    "name": "CDATASIZE",
    "alias_of": "",
    "tlb": "#F941",
    "doc_category": "app_misc",
    "doc_opcode": "F941",
    "doc_fift": "CDATASIZE",
    "doc_stack": "c n - x y z",
    "doc_gas": 0,
    "doc_description": "A non-quiet version of `CDATASIZEQ` that throws a cell overflow exception (8) on failure."
  },
  {
    "name": "ABS",
    "alias_of": "",
    "tlb": "#B60B",
    "doc_category": "arithm_logical",
    "doc_opcode": "B60B",
    "doc_fift": "ABS",
    "doc_stack": "x - |x|",
    "doc_gas": 26,
    "doc_description": "Computes the absolute value of an integer `x`."
  },
  {
    "name": "LDVARINT16",
    "alias_of": "",
    "tlb": "#FA01",
    "doc_category": "app_currency",
    "doc_opcode": "FA01",
    "doc_fift": "LDVARINT16",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Similar to `LDVARUINT16`, but loads a _signed_ _Integer_ `x`.\nApproximately equivalent to `4 LDU` `SWAP` `3 LSHIFT#` `LDIX`."
  },
  {
    "name": "LDIX",
    "alias_of": "",
    "tlb": "#D700",
    "doc_category": "cell_parse",
    "doc_opcode": "D700",
    "doc_fift": "LDIX",
    "doc_stack": "s l - x s'",
    "doc_gas": 26,
    "doc_description": "Loads a signed `l`-bit (`0 <= l <= 257`) integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s'`."
  },
  {
    "name": "MULDIVC",
    "alias_of": "",
    "tlb": "#A986",
    "doc_category": "arithm_div",
    "doc_opcode": "A986",
    "doc_fift": "MULDIVC",
    "doc_stack": "x y z - q'",
    "doc_gas": 26,
    "doc_description": "`q'=ceil(x*y/z)`"
  },
  {
    "name": "DICTUMAX",
    "alias_of": "",
    "tlb": "#F48E",
    "doc_category": "dict_min",
    "doc_opcode": "F48E",
    "doc_fift": "DICTUMAX",
    "doc_stack": "D n - x i -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTMAX`, but returns the key as an unsigned `n`-bit _Integer_ `i`."
  },
  {
    "name": "BLS_G1_ADD",
    "alias_of": "",
    "tlb": "#F93010",
    "doc_category": "app_crypto",
    "doc_opcode": "F93010",
    "doc_fift": "BLS_G1_ADD",
    "doc_stack": "x y - x+y",
    "doc_gas": 3934,
    "doc_description": "Addition on G1."
  },
  {
    "name": "BLS_G1_MUL",
    "alias_of": "",
    "tlb": "#F93013",
    "doc_category": "app_crypto",
    "doc_opcode": "F93013",
    "doc_fift": "BLS_G1_MUL",
    "doc_stack": "x s - x*s",
    "doc_gas": 5234,
    "doc_description": "Multiplies G1 point `x` by scalar `s`. Any `s` is valid, including negative."
  },
  {
    "name": "DICTUMAXREF",
    "alias_of": "",
    "tlb": "#F48F",
    "doc_category": "dict_min",
    "doc_opcode": "F48F",
    "doc_fift": "DICTUMAXREF",
    "doc_stack": "D n - c i -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTUMAX`, but returns the only reference in the value."
  },
  {
    "name": "SDPPFXREV",
    "alias_of": "",
    "tlb": "#C70B",
    "doc_category": "compare_other",
    "doc_opcode": "C70B",
    "doc_fift": "SDPPFXREV",
    "doc_stack": "s s' - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether `s'` is a proper prefix of `s`."
  },
  {
    "name": "GETSTORAGEFEE",
    "alias_of": "",
    "tlb": "#F837",
    "doc_category": "app_config",
    "doc_opcode": "F837",
    "doc_fift": "GETSTORAGEFEE",
    "doc_stack": "cells bits seconds is_mc - price",
    "doc_gas": 0,
    "doc_description": "Calculates storage fees (only current StoragePrices entry is used)."
  },
  {
    "name": "SDSKIPLAST",
    "alias_of": "",
    "tlb": "#D723",
    "doc_category": "cell_parse",
    "doc_opcode": "D723",
    "doc_fift": "SDSKIPLAST",
    "doc_stack": "s l - s'",
    "doc_gas": 26,
    "doc_description": "Returns all but the last `0 <= l <= 1023` bits of `s`."
  },
  {
    "name": "HASHEXT_KECCAK256",
    "alias_of": "",
    "tlb": "#F90403",
    "doc_category": "app_crypto",
    "doc_opcode": "F90403",
    "doc_fift": "HASHEXT_KECCAK256",
    "doc_stack": "s_1 ... s_n n - h",
    "doc_gas": null,
    "doc_description": "Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`."
  },
  {
    "name": "SDCUTLAST",
    "alias_of": "",
    "tlb": "#D722",
    "doc_category": "cell_parse",
    "doc_opcode": "D722",
    "doc_fift": "SDCUTLAST",
    "doc_stack": "s l - s'",
    "doc_gas": 26,
    "doc_description": "Returns the last `0 <= l <= 1023` bits of `s`."
  },
  {
    "name": "DIVMOD",
    "alias_of": "",
    "tlb": "#A90C",
    "doc_category": "arithm_div",
    "doc_opcode": "A90C",
    "doc_fift": "DIVMOD",
    "doc_stack": "x y - q r",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "DICTUADDB",
    "alias_of": "",
    "tlb": "#F453",
    "doc_category": "dict_set_builder",
    "doc_opcode": "F453",
    "doc_fift": "DICTUADDB",
    "doc_stack": "b i D n - D' -1 or D 0",
    "doc_gas": 0,
    "doc_description": ""
  },
  {
    "name": "DICTPUSHCONST",
    "alias_of": "",
    "tlb": "#F4A6_ d:^Cell n:uint10",
    "doc_category": "dict_special",
    "doc_opcode": "F4A6_n",
    "doc_fift": "[ref] [n] DICTPUSHCONST",
    "doc_stack": " - D n",
    "doc_gas": 34,
    "doc_description": "Pushes a non-empty constant dictionary `D` (as a `Cell^?`) along with its key length `0 <= n <= 1023`, stored as a part of the instruction. The dictionary itself is created from the first of remaining references of the current continuation. In this way, the complete `DICTPUSHCONST` instruction can be obtained by first serializing `xF4A4_`, then the non-empty dictionary itself (one `1` bit and a cell reference), and then the unsigned 10-bit integer `n` (as if by a `STU 10` instruction). An empty dictionary can be pushed by a `NEWDICT` primitive instead."
  },
  {
    "name": "BLESS",
    "alias_of": "",
    "tlb": "#ED1E",
    "doc_category": "cont_create",
    "doc_opcode": "ED1E",
    "doc_fift": "BLESS",
    "doc_stack": "s - c",
    "doc_gas": 26,
    "doc_description": "Transforms a _Slice_ `s` into a simple ordinary continuation `c`, with `c.code=s` and an empty stack and savelist."
  },
  {
    "name": "CDATASIZEQ",
    "alias_of": "",
    "tlb": "#F940",
    "doc_category": "app_misc",
    "doc_opcode": "F940",
    "doc_fift": "CDATASIZEQ",
    "doc_stack": "c n - x y z -1 or 0",
    "doc_gas": 0,
    "doc_description": "Recursively computes the count of distinct cells `x`, data bits `y`, and cell references `z` in the dag rooted at _Cell_ `c`, effectively returning the total storage used by this dag taking into account the identification of equal cells. The values of `x`, `y`, and `z` are computed by a depth-first traversal of this dag, with a hash table of visited cell hashes used to prevent visits of already-visited cells. The total count of visited cells `x` cannot exceed non-negative _Integer_ `n`; otherwise the computation is aborted before visiting the `(n+1)`-st cell and a zero is returned to indicate failure. If `c` is _Null_, returns `x=y=z=0`."
  },
  {
    "name": "SBITREFS",
    "alias_of": "",
    "tlb": "#D74B",
    "doc_category": "cell_parse",
    "doc_opcode": "D74B",
    "doc_fift": "SBITREFS",
    "doc_stack": "s - l r",
    "doc_gas": 26,
    "doc_description": "Returns both the number of data bits and the number of references in `s`."
  },
  {
    "name": "LDREFRTOS",
    "alias_of": "",
    "tlb": "#D5",
    "doc_category": "cell_parse",
    "doc_opcode": "D5",
    "doc_fift": "LDREFRTOS",
    "doc_stack": "s - s' s''",
    "doc_gas": null,
    "doc_description": "Equivalent to `LDREF` `SWAP` `CTOS`."
  },
  {
    "name": "GETPRECOMPILEDGAS",
    "alias_of": "",
    "tlb": "#F839",
    "doc_category": "app_config",
    "doc_opcode": "F839",
    "doc_fift": "GETPRECOMPILEDGAS",
    "doc_stack": "- x",
    "doc_gas": 0,
    "doc_description": "Returns gas usage for the current contract if it is precompiled, `null` otherwise."
  },
  {
    "name": "SDSUBSTR",
    "alias_of": "",
    "tlb": "#D724",
    "doc_category": "cell_parse",
    "doc_opcode": "D724",
    "doc_fift": "SDSUBSTR",
    "doc_stack": "s l l' - s'",
    "doc_gas": 26,
    "doc_description": "Returns `0 <= l' <= 1023` bits of `s` starting from offset `0 <= l <= 1023`, thus extracting a bit substring out of the data of `s`."
  },
  {
    "name": "STB",
    "alias_of": "",
    "tlb": "#CF13",
    "doc_category": "cell_build",
    "doc_opcode": "CF13",
    "doc_fift": "STB",
    "doc_stack": "b' b - b''",
    "doc_gas": 26,
    "doc_description": "Appends all data from _Builder_ `b'` to _Builder_ `b`."
  },
  {
    "name": "DICTUMINREF",
    "alias_of": "",
    "tlb": "#F487",
    "doc_category": "dict_min",
    "doc_opcode": "F487",
    "doc_fift": "DICTUMINREF",
    "doc_stack": "D n - c i -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTUMIN`, but returns the only reference in the value."
  },
  {
    "name": "GETFORWARDFEESIMPLE",
    "alias_of": "",
    "tlb": "#F83C",
    "doc_category": "app_config",
    "doc_opcode": "F83C",
    "doc_fift": "GETFORWARDFEESIMPLE",
    "doc_stack": "cells bits is_mc - price",
    "doc_gas": 0,
    "doc_description": "Same as `GETFORWARDFEE`, but without lump price (just (`bits*bit_price + cells*cell_price) / 2^16`)."
  },
  {
    "name": "DICTUGETJMP",
    "alias_of": "",
    "tlb": "#F4A1",
    "doc_category": "dict_special",
    "doc_opcode": "F4A1",
    "doc_fift": "DICTUGETJMP",
    "doc_stack": "i D n - ",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTIGETJMP`, but performs `DICTUGET` instead of `DICTIGET`."
  },
  {
    "name": "XCTOS",
    "alias_of": "",
    "tlb": "#D739",
    "doc_category": "cell_parse",
    "doc_opcode": "D739",
    "doc_fift": "XCTOS",
    "doc_stack": "c - s ?",
    "doc_gas": 0,
    "doc_description": "Transforms an ordinary or exotic cell into a _Slice_, as if it were an ordinary cell. A flag is returned indicating whether `c` is exotic. If that be the case, its type can later be deserialized from the first eight bits of `s`."
  },
  {
    "name": "DICTIGETREF",
    "alias_of": "",
    "tlb": "#F40D",
    "doc_category": "dict_get",
    "doc_opcode": "F40D",
    "doc_fift": "DICTIGETREF",
    "doc_stack": "i D n - c -1 or 0",
    "doc_gas": 0,
    "doc_description": "Combines `DICTIGET` with `DICTGETREF`: it uses signed `n`-bit _Integer_ `i` as a key and returns a _Cell_ instead of a _Slice_ on success."
  },
  {
    "name": "GASCONSUMED",
    "alias_of": "",
    "tlb": "#F807",
    "doc_category": "app_gas",
    "doc_opcode": "F807",
    "doc_fift": "GASCONSUMED",
    "doc_stack": "- g_c",
    "doc_gas": 26,
    "doc_description": "Returns gas consumed by VM so far (including this instruction)."
  },
  {
    "name": "CALLXARGS",
    "alias_of": "",
    "tlb": "#DA p:uint4 r:uint4",
    "doc_category": "cont_basic",
    "doc_opcode": "DApr",
    "doc_fift": "[p] [r] CALLXARGS",
    "doc_stack": "c - ",
    "doc_gas": 26,
    "doc_description": "_Calls_ continuation `c` with `p` parameters and expecting `r` return values\n`0 <= p <= 15`, `0 <= r <= 15`"
  },
  {
    "name": "DICTIGET",
    "alias_of": "",
    "tlb": "#F40C",
    "doc_category": "dict_get",
    "doc_opcode": "F40C",
    "doc_fift": "DICTIGET",
    "doc_stack": "i D n - x -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTGET`, but with a signed (big-endian) `n`-bit _Integer_ `i` as a key. If `i` does not fit into `n` bits, returns `0`. If `i` is a `NaN`, throws an integer overflow exception."
  },
  {
    "name": "PFXDICTGETQ",
    "alias_of": "",
    "tlb": "#F4A8",
    "doc_category": "dict_special",
    "doc_opcode": "F4A8",
    "doc_fift": "PFXDICTGETQ",
    "doc_stack": "s D n - s' x s'' -1 or s 0",
    "doc_gas": 0,
    "doc_description": "Looks up the unique prefix of _Slice_ `s` present in the prefix code dictionary represented by `Cell^?` `D` and `0 <= n <= 1023`. If found, the prefix of `s` is returned as `s'`, and the corresponding value (also a _Slice_) as `x`. The remainder of `s` is returned as a _Slice_ `s''`. If no prefix of `s` is a key in prefix code dictionary `D`, returns the unchanged `s` and a zero flag to indicate failure."
  },
  {
    "name": "SETRAND",
    "alias_of": "",
    "tlb": "#F814",
    "doc_category": "app_rnd",
    "doc_opcode": "F814",
    "doc_fift": "SETRAND",
    "doc_stack": "x - ",
    "doc_gas": null,
    "doc_description": "Sets the random seed to unsigned 256-bit _Integer_ `x`."
  },
  {
    "name": "DICTUGETPREVEQ",
    "alias_of": "",
    "tlb": "#F47F",
    "doc_category": "dict_next",
    "doc_opcode": "F47F",
    "doc_fift": "DICTUGETPREVEQ",
    "doc_stack": "i D n - x' i' -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTGETPREVEQ`, but interprets keys a unsigned `n`-bit integers."
  },
  {
    "name": "XOR",
    "alias_of": "",
    "tlb": "#B2",
    "doc_category": "arithm_logical",
    "doc_opcode": "B2",
    "doc_fift": "XOR",
    "doc_stack": "x y - x xor y",
    "doc_gas": 18,
    "doc_description": "Bitwise xor of two integers."
  },
  {
    "name": "ECRECOVER",
    "alias_of": "",
    "tlb": "#F912",
    "doc_category": "app_crypto",
    "doc_opcode": "F912",
    "doc_fift": "ECRECOVER",
    "doc_stack": "hash v r s - 0 or h x1 x2 -1",
    "doc_gas": 1526,
    "doc_description": "Recovers the public key from a secp256k1 signature, identical to Bitcoin/Ethereum operations. Takes a 32-byte hash as `uint256 hash` and a 65-byte signature as `uint8 v`, `uint256 r`, and `uint256 s`. In TON, the `v` value is strictly 0 or 1; no extra flags or extended values are supported. If the public key cannot be recovered, the instruction returns `0`. On success, it returns the recovered 65-byte public key as `uint8 h`, `uint256 x1`, and `uint256 x2`, followed by `-1`."
  },
  {
    "name": "IFNOTREF",
    "alias_of": "",
    "tlb": "#E301 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E301",
    "doc_fift": "[ref] IFNOTREF",
    "doc_stack": "f - ",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `IFNOT`."
  },
  {
    "name": "DICTIGETOPTREF",
    "alias_of": "",
    "tlb": "#F46A",
    "doc_category": "dict_mayberef",
    "doc_opcode": "F46A",
    "doc_fift": "DICTIGETOPTREF",
    "doc_stack": "i D n - c^?",
    "doc_gas": 0,
    "doc_description": "`DICTGETOPTREF`, but with `i` a signed `n`-bit integer. If the key `i` is out of range, also returns _Null_."
  },
  {
    "name": "DICTMIN",
    "alias_of": "",
    "tlb": "#F482",
    "doc_category": "dict_min",
    "doc_opcode": "F482",
    "doc_fift": "DICTMIN",
    "doc_stack": "D n - x k -1 or 0",
    "doc_gas": 0,
    "doc_description": "Computes the minimal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, and returns `k` along with the associated value `x`."
  },
  {
    "name": "DICTGETREF",
    "alias_of": "",
    "tlb": "#F40B",
    "doc_category": "dict_get",
    "doc_opcode": "F40B",
    "doc_fift": "DICTGETREF",
    "doc_stack": "k D n - c -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTGET`, but with a `LDREF` `ENDS` applied to `x` on success.\nThis operation is useful for dictionaries of type `HashmapE(n,^Y)`."
  },
  {
    "name": "PFXDICTSET",
    "alias_of": "",
    "tlb": "#F470",
    "doc_category": "dict_prefix",
    "doc_opcode": "F470",
    "doc_fift": "PFXDICTSET",
    "doc_stack": "x k D n - D' -1 or D 0",
    "doc_gas": 0,
    "doc_description": ""
  },
  {
    "name": "MULDIVMOD",
    "alias_of": "",
    "tlb": "#A98C",
    "doc_category": "arithm_div",
    "doc_opcode": "A98C",
    "doc_fift": "MULDIVMOD",
    "doc_stack": "x y z - q r",
    "doc_gas": 26,
    "doc_description": "`q=floor(x*y/z)`, `r=x*y-z*q`"
  },
  {
    "name": "PLDUX",
    "alias_of": "",
    "tlb": "#D703",
    "doc_category": "cell_parse",
    "doc_opcode": "D703",
    "doc_fift": "PLDUX",
    "doc_stack": "s l - x",
    "doc_gas": 26,
    "doc_description": "Preloads an unsigned `l`-bit integer from `s`, for `0 <= l <= 256`."
  },
  {
    "name": "TPOP",
    "alias_of": "",
    "tlb": "#6F8D",
    "doc_category": "tuple",
    "doc_opcode": "6F8D",
    "doc_fift": "TPOP",
    "doc_stack": "t - t' x",
    "doc_gas": null,
    "doc_description": "Detaches the last element `x=x_n` from a non-empty _Tuple_ `t=(x_1,...,x_n)`, and returns both the resulting _Tuple_ `t'=(x_1,...,x_{n-1})` and the original last element `x`."
  },
  {
    "name": "BLS_G1_NEG",
    "alias_of": "",
    "tlb": "#F93012",
    "doc_category": "app_crypto",
    "doc_opcode": "F93012",
    "doc_fift": "BLS_G1_NEG",
    "doc_stack": "x - -x",
    "doc_gas": 784,
    "doc_description": "Negation on G1."
  },
  {
    "name": "BLS_PAIRING",
    "alias_of": "",
    "tlb": "#F93030",
    "doc_category": "app_crypto",
    "doc_opcode": "F93030",
    "doc_fift": "BLS_PAIRING",
    "doc_stack": "x_1 y_1 ... x_n y_n n - bool",
    "doc_gas": null,
    "doc_description": "Given G1 points `x_i` and G2 points `y_i`, calculates and multiply pairings of `x_i,y_i`. Returns true if the result is the multiplicative identity in FP12, false otherwise. Returns false if `n=0`."
  },
  {
    "name": "UBITSIZE",
    "alias_of": "",
    "tlb": "#B603",
    "doc_category": "arithm_logical",
    "doc_opcode": "B603",
    "doc_fift": "UBITSIZE",
    "doc_stack": "x - c",
    "doc_gas": 26,
    "doc_description": "Computes smallest `c >= 0` such that `x` fits into a `c`-bit unsigned integer (`0 <= x < 2^c`), or throws a range check exception."
  },
  {
    "name": "JMPX",
    "alias_of": "",
    "tlb": "#D9",
    "doc_category": "cont_basic",
    "doc_opcode": "D9",
    "doc_fift": "JMPX",
    "doc_stack": "c - ",
    "doc_gas": 18,
    "doc_description": "_Jumps_, or transfers control, to continuation `c`.\nThe remainder of the previous current continuation `cc` is discarded."
  },
  {
    "name": "DICTIGETJMP",
    "alias_of": "",
    "tlb": "#F4A0",
    "doc_category": "dict_special",
    "doc_opcode": "F4A0",
    "doc_fift": "DICTIGETJMP",
    "doc_stack": "i D n - ",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTIGET`, but with `x` `BLESS`ed into a continuation with a subsequent `JMPX` to it on success. On failure, does nothing. This is useful for implementing `switch`/`case` constructions."
  },
  {
    "name": "DICTUREPLACEB",
    "alias_of": "",
    "tlb": "#F44B",
    "doc_category": "dict_set_builder",
    "doc_opcode": "F44B",
    "doc_fift": "DICTUREPLACEB",
    "doc_stack": "b i D n - D' -1 or D 0",
    "doc_gas": 0,
    "doc_description": ""
  },
  {
    "name": "PREPAREDICT",
    "alias_of": "",
    "tlb": "#F1A_ n:uint14",
    "doc_category": "cont_dict",
    "doc_opcode": "F1A_n",
    "doc_fift": "[n] PREPARE\n[n] PREPAREDICT",
    "doc_stack": " - n c",
    "doc_gas": 0,
    "doc_description": "Equivalent to `n PUSHINT` `c3 PUSHCTR`, for `0 <= n < 2^14`.\nIn this way, `[n] CALL` is approximately equivalent to `[n] PREPARE` `EXECUTE`, and `[n] JMP` is approximately equivalent to `[n] PREPARE` `JMPX`.\nOne might use, for instance, `CALLXARGS` or `CALLCC` instead of `EXECUTE` here."
  },
  {
    "name": "DICTISETREF",
    "alias_of": "",
    "tlb": "#F415",
    "doc_category": "dict_set",
    "doc_opcode": "F415",
    "doc_fift": "DICTISETREF",
    "doc_stack": "c i D n - D'",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTSETREF`, but with the key a signed `n`-bit integer as in `DICTISET`."
  },
  {
    "name": "SDLEXCMP",
    "alias_of": "",
    "tlb": "#C704",
    "doc_category": "compare_other",
    "doc_opcode": "C704",
    "doc_fift": "SDLEXCMP",
    "doc_stack": "s s' - x",
    "doc_gas": 26,
    "doc_description": "Compares the data of `s` lexicographically with the data of `s'`, returning `-1`, 0, or 1 depending on the result."
  },
  {
    "name": "HASHEXT_SHA256",
    "alias_of": "",
    "tlb": "#F90400",
    "doc_category": "app_crypto",
    "doc_opcode": "F90400",
    "doc_fift": "HASHEXT_SHA256",
    "doc_stack": "s_1 ... s_n n - h",
    "doc_gas": null,
    "doc_description": "Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`."
  },
  {
    "name": "DICTUREMMIN",
    "alias_of": "",
    "tlb": "#F496",
    "doc_category": "dict_min",
    "doc_opcode": "F496",
    "doc_fift": "DICTUREMMIN",
    "doc_stack": "D n - D' x i -1 or D 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTREMMIN`, but returns the key as an unsigned `n`-bit _Integer_ `i`."
  },
  {
    "name": "DICTUSETGET",
    "alias_of": "",
    "tlb": "#F41E",
    "doc_category": "dict_set",
    "doc_opcode": "F41E",
    "doc_fift": "DICTUSETGET",
    "doc_stack": "x i D n - D' y -1 or D' 0",
    "doc_gas": 0,
    "doc_description": "`DICTISETGET`, but with `i` an unsigned `n`-bit integer."
  },
  {
    "name": "DICTUREMMINREF",
    "alias_of": "",
    "tlb": "#F497",
    "doc_category": "dict_min",
    "doc_opcode": "F497",
    "doc_fift": "DICTUREMMINREF",
    "doc_stack": "D n - D' c i -1 or D 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTUREMMIN`, but returns the only reference in the value."
  },
  {
    "name": "PARSEMSGADDR",
    "alias_of": "",
    "tlb": "#FA42",
    "doc_category": "app_addr",
    "doc_opcode": "FA42",
    "doc_fift": "PARSEMSGADDR",
    "doc_stack": "s - t",
    "doc_gas": 26,
    "doc_description": "Decomposes _Slice_ `s` containing a valid `MsgAddress` into a _Tuple_ `t` with separate fields of this `MsgAddress`. If `s` is not a valid `MsgAddress`, a cell deserialization exception is thrown."
  },
  {
    "name": "SETINDEXVAR",
    "alias_of": "",
    "tlb": "#6F85",
    "doc_category": "tuple",
    "doc_opcode": "6F85",
    "doc_fift": "SETINDEXVAR",
    "doc_stack": "t x k - t'",
    "doc_gas": null,
    "doc_description": "Similar to `k SETINDEX`, but with `0 <= k <= 254` taken from the stack."
  },
  {
    "name": "NOP",
    "alias_of": "",
    "tlb": "#00",
    "doc_category": "stack_basic",
    "doc_opcode": "00",
    "doc_fift": "NOP",
    "doc_stack": "-",
    "doc_gas": 18,
    "doc_description": "Does nothing."
  },
  {
    "name": "EXPLODEVAR",
    "alias_of": "",
    "tlb": "#6F84",
    "doc_category": "tuple",
    "doc_opcode": "6F84",
    "doc_fift": "EXPLODEVAR",
    "doc_stack": "t n - x_1 ... x_m m",
    "doc_gas": null,
    "doc_description": "Similar to `n EXPLODE`, but with `0 <= n <= 255` taken from the stack."
  },
  {
    "name": "CDEPTH",
    "alias_of": "",
    "tlb": "#D765",
    "doc_category": "cell_parse",
    "doc_opcode": "D765",
    "doc_fift": "CDEPTH",
    "doc_stack": "c - x",
    "doc_gas": 26,
    "doc_description": "Returns the depth of _Cell_ `c`. If `c` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `c`. If `c` is a _Null_ instead of a _Cell_, returns zero."
  },
  {
    "name": "LDMSGADDRQ",
    "alias_of": "",
    "tlb": "#FA41",
    "doc_category": "app_addr",
    "doc_opcode": "FA41",
    "doc_fift": "LDMSGADDRQ",
    "doc_stack": "s - s' s'' -1 or s 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of `LDMSGADDR`: on success, pushes an extra `-1`; on failure, pushes the original `s` and a zero."
  },
  {
    "name": "UFITSX",
    "alias_of": "",
    "tlb": "#B601",
    "doc_category": "arithm_logical",
    "doc_opcode": "B601",
    "doc_fift": "UFITSX",
    "doc_stack": "x c - x",
    "doc_gas": null,
    "doc_description": "Checks whether `x` is a `c`-bit unsigned integer for `0 <= c <= 1023`."
  },
  {
    "name": "LSHIFT_VAR",
    "alias_of": "",
    "tlb": "#AC",
    "doc_category": "arithm_logical",
    "doc_opcode": "AC",
    "doc_fift": "LSHIFT",
    "doc_stack": "x y - x*2^y",
    "doc_gas": 18,
    "doc_description": "`0 <= y <= 1023`"
  },
  {
    "name": "SDATASIZE",
    "alias_of": "",
    "tlb": "#F943",
    "doc_category": "app_misc",
    "doc_opcode": "F943",
    "doc_fift": "SDATASIZE",
    "doc_stack": "s n - x y z",
    "doc_gas": 0,
    "doc_description": "A non-quiet version of `SDATASIZEQ` that throws a cell overflow exception (8) on failure."
  },
  {
    "name": "RSHIFTR",
    "alias_of": "",
    "tlb": "#A935 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A935tt",
    "doc_fift": "[tt+1] RSHIFTR#",
    "doc_stack": "x - round(x/2^(tt+1))",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "STSLICECONST",
    "alias_of": "",
    "tlb": "#CFC0_ x:(## 2) y:(## 3) c:(x * ^Cell) sss:((8 * y + 2) * Bit)",
    "doc_category": "cell_build",
    "doc_opcode": "CFC0_xysss",
    "doc_fift": "[slice] STSLICECONST",
    "doc_stack": "b - b'",
    "doc_gas": 24,
    "doc_description": "Stores a constant subslice `sss`.\n_Details:_ `sss` consists of `0 <= x <= 3` references and up to `8y+2` data bits, with `0 <= y <= 7`. Completion bit is assumed.\nNote that the assembler can replace `STSLICECONST` with `PUSHSLICE` `STSLICER` if the slice is too big."
  },
  {
    "name": "SETLIBCODE",
    "alias_of": "",
    "tlb": "#FB06",
    "doc_category": "app_actions",
    "doc_opcode": "FB06",
    "doc_fift": "SETLIBCODE",
    "doc_stack": "c x - ",
    "doc_gas": 526,
    "doc_description": "Creates an output action that would modify the collection of this smart contract libraries by adding or removing library with code given in _Cell_ `c`. If `x=0`, the library is actually removed if it was previously present in the collection (if not, this action does nothing). If `x=1`, the library is added as a private library, and if `x=2`, the library is added as a public library (and becomes available to all smart contracts if the current smart contract resides in the masterchain); if the library was present in the collection before, its public/private status is changed according to `x`. Values of `x` other than `0...2` are invalid."
  },
  {
    "name": "ISNAN",
    "alias_of": "",
    "tlb": "#C4",
    "doc_category": "compare_int",
    "doc_opcode": "C4",
    "doc_fift": "ISNAN",
    "doc_stack": "x - x=NaN",
    "doc_gas": 18,
    "doc_description": "Checks whether `x` is a `NaN`."
  },
  {
    "name": "RSHIFT_VAR",
    "alias_of": "",
    "tlb": "#AD",
    "doc_category": "arithm_logical",
    "doc_opcode": "AD",
    "doc_fift": "RSHIFT",
    "doc_stack": "x y - floor(x/2^y)",
    "doc_gas": 18,
    "doc_description": "`0 <= y <= 1023`"
  },
  {
    "name": "PREVMCBLOCKS",
    "alias_of": "",
    "tlb": "#F83400",
    "doc_category": "app_config",
    "doc_opcode": "F83400",
    "doc_fift": "PREVMCBLOCKS",
    "doc_stack": "- t",
    "doc_gas": 0,
    "doc_description": "Retrives `last_mc_blocks` part of PrevBlocksInfo from c7 (parameter 13)."
  },
  {
    "name": "PUSHNAN",
    "alias_of": "",
    "tlb": "#83FF",
    "doc_category": "const_int",
    "doc_opcode": "83FF",
    "doc_fift": "PUSHNAN",
    "doc_stack": "- NaN",
    "doc_gas": 26,
    "doc_description": "Pushes a `NaN`."
  },
  {
    "name": "SETINDEX",
    "alias_of": "",
    "tlb": "#6F5 k:uint4",
    "doc_category": "tuple",
    "doc_opcode": "6F5k",
    "doc_fift": "[k] SETINDEX",
    "doc_stack": "t x - t'",
    "doc_gas": null,
    "doc_description": "Computes _Tuple_ `t'` that differs from `t` only at position `t'_{k+1}`, which is set to `x`.\n`0 <= k <= 15`\nIf `k >= |t|`, throws a range check exception."
  },
  {
    "name": "DICTUGETPREV",
    "alias_of": "",
    "tlb": "#F47E",
    "doc_category": "dict_next",
    "doc_opcode": "F47E",
    "doc_fift": "DICTUGETPREV",
    "doc_stack": "i D n - x' i' -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTGETPREV`, but interprets keys as unsigned `n`-bit integers."
  },
  {
    "name": "DICTIMIN",
    "alias_of": "",
    "tlb": "#F484",
    "doc_category": "dict_min",
    "doc_opcode": "F484",
    "doc_fift": "DICTIMIN",
    "doc_stack": "D n - x i -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTMIN`, but computes the minimal key `i` under the assumption that all keys are big-endian signed `n`-bit integers. Notice that the key and value returned may differ from those computed by `DICTMIN` and `DICTUMIN`."
  },
  {
    "name": "QTLEN",
    "alias_of": "",
    "tlb": "#6F89",
    "doc_category": "tuple",
    "doc_opcode": "6F89",
    "doc_fift": "QTLEN",
    "doc_stack": "t - n or -1",
    "doc_gas": 26,
    "doc_description": "Similar to `TLEN`, but returns `-1` if `t` is not a _Tuple_."
  },
  {
    "name": "SENDMSG",
    "alias_of": "",
    "tlb": "#FB08",
    "doc_category": "app_actions",
    "doc_opcode": "FB08",
    "doc_fift": "SENDMSG",
    "doc_stack": "c x - fee",
    "doc_gas": 526,
    "doc_description": "Creates an output action and returns a fee for creating a message. Mode has the same effect as in the case of `SENDRAWMSG`. Additionally `+1024` means - do not create an action, only estimate fee. Other modes affect the fee calculation as follows: `+64` substitutes the entire balance of the incoming message as an outcoming value (slightly inaccurate, gas expenses that cannot be estimated before the computation is completed are not taken into account), `+128` substitutes the value of the entire balance of the contract before the start of the computation phase (slightly inaccurate, since gas expenses that cannot be estimated before the completion of the computation phase are not taken into account)."
  },
  {
    "name": "DICTUADD",
    "alias_of": "",
    "tlb": "#F436",
    "doc_category": "dict_set",
    "doc_opcode": "F436",
    "doc_fift": "DICTUADD",
    "doc_stack": "x i D n - D' -1 or D 0",
    "doc_gas": 0,
    "doc_description": "`DICTADD`, but with `i` an unsigned `n`-bit integer."
  },
  {
    "name": "IFRETALT",
    "alias_of": "",
    "tlb": "#E308",
    "doc_category": "cont_conditional",
    "doc_opcode": "E308",
    "doc_fift": "IFRETALT",
    "doc_stack": "f -",
    "doc_gas": 26,
    "doc_description": "Performs `RETALT` if integer `f!=0`."
  },
  {
    "name": "PREVKEYBLOCK",
    "alias_of": "",
    "tlb": "#F83401",
    "doc_category": "app_config",
    "doc_opcode": "F83401",
    "doc_fift": "PREVKEYBLOCK",
    "doc_stack": "- t",
    "doc_gas": 0,
    "doc_description": "Retrives `prev_key_block` part of PrevBlocksInfo from c7 (parameter 13)."
  },
  {
    "name": "MULRSHIFTR",
    "alias_of": "",
    "tlb": "#A9B5 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A9B5tt",
    "doc_fift": "[tt+1] MULRSHIFTR#",
    "doc_stack": "x y - round(x*y/2^(tt+1))",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "DICTISET",
    "alias_of": "",
    "tlb": "#F414",
    "doc_category": "dict_set",
    "doc_opcode": "F414",
    "doc_fift": "DICTISET",
    "doc_stack": "x i D n - D'",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTSET`, but with the key represented by a (big-endian) signed `n`-bit integer `i`. If `i` does not fit into `n` bits, a range check exception is generated."
  },
  {
    "name": "DICTGETOPTREF",
    "alias_of": "",
    "tlb": "#F469",
    "doc_category": "dict_mayberef",
    "doc_opcode": "F469",
    "doc_fift": "DICTGETOPTREF",
    "doc_stack": "k D n - c^?",
    "doc_gas": 0,
    "doc_description": "A variant of `DICTGETREF` that returns _Null_ instead of the value `c^?` if the key `k` is absent from dictionary `D`."
  },
  {
    "name": "CMP",
    "alias_of": "",
    "tlb": "#BF",
    "doc_category": "compare_int",
    "doc_opcode": "BF",
    "doc_fift": "CMP",
    "doc_stack": "x y - sgn(x-y)",
    "doc_gas": 18,
    "doc_description": "Computes the sign of `x-y`:\n`-1` if `x<y`, `0` if `x=y`, `1` if `x>y`.\nNo integer overflow can occur here unless `x` or `y` is a `NaN`."
  },
  {
    "name": "RIST255_MUL",
    "alias_of": "",
    "tlb": "#F924",
    "doc_category": "app_crypto",
    "doc_opcode": "F924",
    "doc_fift": "RIST255_MUL",
    "doc_stack": "x n - x*n",
    "doc_gas": 2026,
    "doc_description": "Multiplies point `x` by a scalar `n`. Any `n` is valid, including negative."
  },
  {
    "name": "SDCUTFIRST",
    "alias_of": "",
    "tlb": "#D720",
    "doc_category": "cell_parse",
    "doc_opcode": "D720",
    "doc_fift": "SDCUTFIRST",
    "doc_stack": "s l - s'",
    "doc_gas": 26,
    "doc_description": "Returns the first `0 <= l <= 1023` bits of `s`. It is equivalent to `PLDSLICEX`."
  },
  {
    "name": "SDEPTH",
    "alias_of": "",
    "tlb": "#D764",
    "doc_category": "cell_parse",
    "doc_opcode": "D764",
    "doc_fift": "SDEPTH",
    "doc_stack": "s - x",
    "doc_gas": 26,
    "doc_description": "Returns the depth of _Slice_ `s`. If `s` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `s`."
  },
  {
    "name": "STONES",
    "alias_of": "",
    "tlb": "#CF41",
    "doc_category": "cell_build",
    "doc_opcode": "CF41",
    "doc_fift": "STONES",
    "doc_stack": "b n - b'",
    "doc_gas": 26,
    "doc_description": "Stores `n` binary ones into _Builder_ `b`."
  },
  {
    "name": "HASHEXTA_SHA256",
    "alias_of": "",
    "tlb": "#F90600",
    "doc_category": "app_crypto",
    "doc_opcode": "F90600",
    "doc_fift": "HASHEXTA_SHA256",
    "doc_stack": "b s_1 ... s_n n - b'",
    "doc_gas": null,
    "doc_description": "Calculates hash of the concatenation of slices (or builders) `s_1...s_n`. Appends the resulting hash to a builder `b`."
  },
  {
    "name": "RIST255_MULBASE",
    "alias_of": "",
    "tlb": "#F925",
    "doc_category": "app_crypto",
    "doc_opcode": "F925",
    "doc_fift": "RIST255_MULBASE",
    "doc_stack": "n - g*n",
    "doc_gas": 776,
    "doc_description": "Multiplies the generator point `g` by a scalar `n`. Any `n` is valid, including negative."
  },
  {
    "name": "GETGLOBVAR",
    "alias_of": "",
    "tlb": "#F840",
    "doc_category": "app_global",
    "doc_opcode": "F840",
    "doc_fift": "GETGLOBVAR",
    "doc_stack": "k - x",
    "doc_gas": 26,
    "doc_description": "Returns the `k`-th global variable for `0 <= k < 255`.\nEquivalent to `c7 PUSHCTR` `SWAP` `INDEXVARQ`."
  },
  {
    "name": "DICTIDEL",
    "alias_of": "",
    "tlb": "#F45A",
    "doc_category": "dict_delete",
    "doc_opcode": "F45A",
    "doc_fift": "DICTIDEL",
    "doc_stack": "i D n - D' ?",
    "doc_gas": 0,
    "doc_description": "A version of `DICTDEL` with the key represented by a signed `n`-bit _Integer_ `i`. If `i` does not fit into `n` bits, simply returns `D` `0` (''key not found, dictionary unmodified'')."
  },
  {
    "name": "SDBEGINSQ",
    "alias_of": "",
    "tlb": "#D72E_ x:(## 7) sss:((8 * x + 3) * Bit)",
    "doc_category": "cell_parse",
    "doc_opcode": "D72E_xsss",
    "doc_fift": "[slice] SDBEGINSQ",
    "doc_stack": "s - s'' -1 or s 0",
    "doc_gas": 31,
    "doc_description": "A quiet version of `SDBEGINS`."
  },
  {
    "name": "SCUTLAST",
    "alias_of": "",
    "tlb": "#D732",
    "doc_category": "cell_parse",
    "doc_opcode": "D732",
    "doc_fift": "SCUTLAST",
    "doc_stack": "s l r - s'",
    "doc_gas": 26,
    "doc_description": "Returns the last `0 <= l <= 1023` data bits and last `0 <= r <= 4` references of `s`."
  },
  {
    "name": "DICTUDELGETREF",
    "alias_of": "",
    "tlb": "#F467",
    "doc_category": "dict_delete",
    "doc_opcode": "F467",
    "doc_fift": "DICTUDELGETREF",
    "doc_stack": "i D n - D' c -1 or D 0",
    "doc_gas": 0,
    "doc_description": "`DICTDELGETREF`, but with `i` an unsigned `n`-bit integer."
  },
  {
    "name": "PLDDICTQ",
    "alias_of": "",
    "tlb": "#F407",
    "doc_category": "dict_serial",
    "doc_opcode": "F407",
    "doc_fift": "PLDDICTQ",
    "doc_stack": "s - D -1 or 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of `PLDDICT`."
  },
  {
    "name": "DICTDELGET",
    "alias_of": "",
    "tlb": "#F462",
    "doc_category": "dict_delete",
    "doc_opcode": "F462",
    "doc_fift": "DICTDELGET",
    "doc_stack": "k D n - D' x -1 or D 0",
    "doc_gas": 0,
    "doc_description": "Deletes `n`-bit key, represented by a _Slice_ `k`, from dictionary `D`. If the key is present, returns the modified dictionary `D'`, the original value `x` associated with the key `k` (represented by a _Slice_), and the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`."
  },
  {
    "name": "GETGASFEESIMPLE",
    "alias_of": "",
    "tlb": "#F83B",
    "doc_category": "app_config",
    "doc_opcode": "F83B",
    "doc_fift": "GETGASFEESIMPLE",
    "doc_stack": "gas_used is_mc - price",
    "doc_gas": 0,
    "doc_description": "Same as `GETGASFEE`, but without flat price (just `(gas_used * price) / 2^16)`."
  },
  {
    "name": "RSHIFTC",
    "alias_of": "",
    "tlb": "#A936 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A936tt",
    "doc_fift": "[tt+1] RSHIFTC#",
    "doc_stack": "x - ceil(x/2^(tt+1))",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "SDPFXREV",
    "alias_of": "",
    "tlb": "#C709",
    "doc_category": "compare_other",
    "doc_opcode": "C709",
    "doc_fift": "SDPFXREV",
    "doc_stack": "s s' - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether `s'` is a prefix of `s`, equivalent to `SWAP` `SDPFX`."
  },
  {
    "name": "QMUL",
    "alias_of": "",
    "tlb": "#B7A8",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A8",
    "doc_fift": "QMUL",
    "doc_stack": "x y - x*y",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QMULDIVMOD",
    "alias_of": "",
    "tlb": "#B7A98C",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A98C",
    "doc_fift": "QMULDIVMOD",
    "doc_stack": "x y z - q r",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "DICTIGETNEXT",
    "alias_of": "",
    "tlb": "#F478",
    "doc_category": "dict_next",
    "doc_opcode": "F478",
    "doc_fift": "DICTIGETNEXT",
    "doc_stack": "i D n - x' i' -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTGETNEXT`, but interprets all keys in dictionary `D` as big-endian signed `n`-bit integers, and computes the minimal key `i'` that is larger than _Integer_ `i` (which does not necessarily fit into `n` bits)."
  },
  {
    "name": "DICTSET",
    "alias_of": "",
    "tlb": "#F412",
    "doc_category": "dict_set",
    "doc_opcode": "F412",
    "doc_fift": "DICTSET",
    "doc_stack": "x k D n - D'",
    "doc_gas": 0,
    "doc_description": "Sets the value associated with `n`-bit key `k` (represented by a _Slice_ as in `DICTGET`) in dictionary `D` (also represented by a _Slice_) to value `x` (again a _Slice_), and returns the resulting dictionary as `D'`."
  },
  {
    "name": "LDULE4",
    "alias_of": "",
    "tlb": "#D751",
    "doc_category": "cell_parse",
    "doc_opcode": "D751",
    "doc_fift": "LDULE4",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads a little-endian unsigned 32-bit integer."
  },
  {
    "name": "DICTSETREF",
    "alias_of": "",
    "tlb": "#F413",
    "doc_category": "dict_set",
    "doc_opcode": "F413",
    "doc_fift": "DICTSETREF",
    "doc_stack": "c k D n - D'",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTSET`, but with the value set to a reference to _Cell_ `c`."
  },
  {
    "name": "DICTUADDREF",
    "alias_of": "",
    "tlb": "#F437",
    "doc_category": "dict_set",
    "doc_opcode": "F437",
    "doc_fift": "DICTUADDREF",
    "doc_stack": "c i D n - D' -1 or D 0",
    "doc_gas": 0,
    "doc_description": "`DICTADDREF`, but with `i` an unsigned `n`-bit integer."
  },
  {
    "name": "GLOBALID",
    "alias_of": "",
    "tlb": "#F835",
    "doc_category": "app_config",
    "doc_opcode": "F835",
    "doc_fift": "GLOBALID",
    "doc_stack": "- i",
    "doc_gas": 0,
    "doc_description": "Retrieves `global_id` from 19 network config."
  },
  {
    "name": "SDCNTTRAIL1",
    "alias_of": "",
    "tlb": "#C713",
    "doc_category": "compare_other",
    "doc_opcode": "C713",
    "doc_fift": "SDCNTTRAIL1",
    "doc_stack": "s - n",
    "doc_gas": 26,
    "doc_description": "Returns the number of trailing ones in `s`."
  },
  {
    "name": "STBREF",
    "alias_of": "",
    "tlb": "#CF11",
    "doc_category": "cell_build",
    "doc_opcode": "CF11",
    "doc_fift": "STBREF",
    "doc_stack": "b' b - b''",
    "doc_gas": 526,
    "doc_description": "Equivalent to `SWAP` `STBREFR`."
  },
  {
    "name": "JMPXDATA",
    "alias_of": "",
    "tlb": "#DB35",
    "doc_category": "cont_basic",
    "doc_opcode": "DB35",
    "doc_fift": "JMPXDATA",
    "doc_stack": "c - ",
    "doc_gas": 26,
    "doc_description": "Similar to `CALLCC`, but the remainder of the current continuation (the old value of `cc`) is converted into a _Slice_ before pushing it into the stack of `c`."
  },
  {
    "name": "ENDXC",
    "alias_of": "",
    "tlb": "#CF23",
    "doc_category": "cell_build",
    "doc_opcode": "CF23",
    "doc_fift": "ENDXC",
    "doc_stack": "b x - c",
    "doc_gas": 526,
    "doc_description": "If `x!=0`, creates a _special_ or _exotic_ cell from _Builder_ `b`.\nThe type of the exotic cell must be stored in the first 8 bits of `b`.\nIf `x=0`, it is equivalent to `ENDC`. Otherwise some validity checks on the data and references of `b` are performed before creating the exotic cell."
  },
  {
    "name": "LSHIFTDIVC",
    "alias_of": "",
    "tlb": "#A9D6 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A9D6tt",
    "doc_fift": "[tt+1] LSHIFT#DIVC",
    "doc_stack": "x y - ceil(2^(tt+1)*x/y)",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "HASHEXT_SHA512",
    "alias_of": "",
    "tlb": "#F90401",
    "doc_category": "app_crypto",
    "doc_opcode": "F90401",
    "doc_fift": "HASHEXT_SHA512",
    "doc_stack": "s_1 ... s_n n - h1 h2",
    "doc_gas": null,
    "doc_description": "Calculates and returns hash of the concatenation of slices (or builders) `s_1...s_n`."
  },
  {
    "name": "RIST255_FROMHASH",
    "alias_of": "",
    "tlb": "#F920",
    "doc_category": "app_crypto",
    "doc_opcode": "F920",
    "doc_fift": "RIST255_FROMHASH",
    "doc_stack": "h1 h2 - x",
    "doc_gas": 626,
    "doc_description": "Deterministically generates a valid point `x` from a 512-bit hash (given as two 256-bit integers)."
  },
  {
    "name": "RIST255_PUSHL",
    "alias_of": "",
    "tlb": "#F926",
    "doc_category": "app_crypto",
    "doc_opcode": "F926",
    "doc_fift": "RIST255_PUSHL",
    "doc_stack": "- l",
    "doc_gas": 26,
    "doc_description": "Pushes integer l=2^252+27742317777372353535851937790883648493, which is the order of the group."
  },
  {
    "name": "RIST255_SUB",
    "alias_of": "",
    "tlb": "#F923",
    "doc_category": "app_crypto",
    "doc_opcode": "F923",
    "doc_fift": "RIST255_SUB",
    "doc_stack": "x y - x-y",
    "doc_gas": 626,
    "doc_description": "Subtraction of two points on curve."
  },
  {
    "name": "DICTIMINREF",
    "alias_of": "",
    "tlb": "#F485",
    "doc_category": "dict_min",
    "doc_opcode": "F485",
    "doc_fift": "DICTIMINREF",
    "doc_stack": "D n - c i -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTIMIN`, but returns the only reference in the value."
  },
  {
    "name": "PLDUZ",
    "alias_of": "",
    "tlb": "#D714_ c:uint3",
    "doc_category": "cell_parse",
    "doc_opcode": "D714_c",
    "doc_fift": "[32(c+1)] PLDUZ",
    "doc_stack": "s - s x",
    "doc_gas": 26,
    "doc_description": "Preloads the first `32(c+1)` bits of _Slice_ `s` into an unsigned integer `x`, for `0 <= c <= 7`. If `s` is shorter than necessary, missing bits are assumed to be zero. This operation is intended to be used along with `IFBITJMP` and similar instructions."
  },
  {
    "name": "DICTIGETJMPZ",
    "alias_of": "",
    "tlb": "#F4BC",
    "doc_category": "dict_special",
    "doc_opcode": "F4BC",
    "doc_fift": "DICTIGETJMPZ",
    "doc_stack": "i D n - i or nothing",
    "doc_gas": 0,
    "doc_description": "A variant of `DICTIGETJMP` that returns index `i` on failure."
  },
  {
    "name": "THROWARG",
    "alias_of": "",
    "tlb": "#F2CC_ n:uint11",
    "doc_category": "exceptions",
    "doc_opcode": "F2CC_n",
    "doc_fift": "[n] THROWARG",
    "doc_stack": "x - x nn",
    "doc_gas": 84,
    "doc_description": "Throws exception `0 <= n <  2^11` with parameter `x`, by copying `x` and `n` into the stack of `c2` and transferring control to `c2`."
  },
  {
    "name": "DICTIADDREF",
    "alias_of": "",
    "tlb": "#F435",
    "doc_category": "dict_set",
    "doc_opcode": "F435",
    "doc_fift": "DICTIADDREF",
    "doc_stack": "c i D n - D' -1 or D 0",
    "doc_gas": 0,
    "doc_description": "`DICTADDREF`, but with `i` a signed `n`-bit integer."
  },
  {
    "name": "PUSHSLICE_REFS",
    "alias_of": "",
    "tlb": "#8C r:(## 2) xx:(## 5) c:((r + 1) * ^Cell) ssss:((8 * xx + 1) * Bit)",
    "doc_category": "const_data",
    "doc_opcode": "8Crxxssss",
    "doc_fift": "[slice] PUSHSLICE\n[slice] SLICE",
    "doc_stack": "- s",
    "doc_gas": 25,
    "doc_description": "Pushes the slice `slice` into the stack.\n_Details:_ Pushes the (prefix) subslice of `cc.code` consisting of its first `1 <= r+1 <= 4` references and up to first `8xx+1` bits of data, with `0 <= xx <= 31`.\nA completion tag is also assumed."
  },
  {
    "name": "DICTIGETPREVEQ",
    "alias_of": "",
    "tlb": "#F47B",
    "doc_category": "dict_next",
    "doc_opcode": "F47B",
    "doc_fift": "DICTIGETPREVEQ",
    "doc_stack": "i D n - x' i' -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTGETPREVEQ`, but interprets keys as signed `n`-bit integers."
  },
  {
    "name": "PLDSLICE",
    "alias_of": "",
    "tlb": "#D71D cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D71Dcc",
    "doc_fift": "[cc+1] PLDSLICE",
    "doc_stack": "s - s''",
    "doc_gas": 34,
    "doc_description": "Returns the first `0 < cc+1 <= 256` bits of `s` as `s''`."
  },
  {
    "name": "DICTADDB",
    "alias_of": "",
    "tlb": "#F451",
    "doc_category": "dict_set_builder",
    "doc_opcode": "F451",
    "doc_fift": "DICTADDB",
    "doc_stack": "b k D n - D' -1 or D 0",
    "doc_gas": 0,
    "doc_description": ""
  },
  {
    "name": "LSHIFTDIVR",
    "alias_of": "",
    "tlb": "#A9D5 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A9D5tt",
    "doc_fift": "[tt+1] LSHIFT#DIVR",
    "doc_stack": "x y - round(2^(tt+1)*x/y)",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "RUNVM",
    "alias_of": "",
    "tlb": "#DB4 flags:(## 12)",
    "doc_category": "cont_basic",
    "doc_opcode": "DB4fff",
    "doc_fift": "flags RUNVM",
    "doc_stack": "x_1 ... x_n n code [r] [c4] [c7] [g_l] [g_m] - x'_1 ... x'_m exitcode [data'] [c4'] [c5] [g_c]",
    "doc_gas": 0,
    "doc_description": "Runs child VM with code `code` and stack `x_1...x_n`. Returns the resulting stack `x'_1...x'_m` and exitcode. Other arguments and return values are enabled by flags."
  },
  {
    "name": "MULRSHIFTRMOD",
    "alias_of": "",
    "tlb": "#A9BD",
    "doc_category": "arithm_div",
    "doc_opcode": "A9BD",
    "doc_fift": "MULRSHIFTR#MOD",
    "doc_stack": "x y - q=round(x*y/2^(tt+1)) r=xy-q*2^(tt+1)",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "LSHIFTDIVMODR_VAR",
    "alias_of": "",
    "tlb": "#A9CD",
    "doc_category": "arithm_div",
    "doc_opcode": "A9CD",
    "doc_fift": "LSHIFTDIVMODR",
    "doc_stack": "x y z - q=round(2^z*x/y) r=2^z*x-q*y",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "RSHIFTR_VAR",
    "alias_of": "",
    "tlb": "#A925",
    "doc_category": "arithm_div",
    "doc_opcode": "A925",
    "doc_fift": "RSHIFTR",
    "doc_stack": "x y - round(x/2^y)",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "UFITS",
    "alias_of": "",
    "tlb": "#B5 cc:uint8",
    "doc_category": "arithm_logical",
    "doc_opcode": "B5cc",
    "doc_fift": "[cc+1] UFITS",
    "doc_stack": "x - x",
    "doc_gas": null,
    "doc_description": "Checks whether `x` is a `cc+1`-bit unsigned integer for `0 <= cc <= 255` (i.e., whether `0 <= x < 2^(cc+1)`)."
  },
  {
    "name": "DIVR",
    "alias_of": "",
    "tlb": "#A905",
    "doc_category": "arithm_div",
    "doc_opcode": "A905",
    "doc_fift": "DIVR",
    "doc_stack": "x y - q'",
    "doc_gas": 26,
    "doc_description": "`q'=round(x/y)`, `r'=x-y*q'`"
  },
  {
    "name": "SGN",
    "alias_of": "",
    "tlb": "#B8",
    "doc_category": "compare_int",
    "doc_opcode": "B8",
    "doc_fift": "SGN",
    "doc_stack": "x - sgn(x)",
    "doc_gas": 18,
    "doc_description": "Computes the sign of an integer `x`:\n`-1` if `x<0`, `0` if `x=0`, `1` if `x>0`."
  },
  {
    "name": "STUR",
    "alias_of": "",
    "tlb": "#CF0B cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF0Bcc",
    "doc_fift": "[cc+1] STUR",
    "doc_stack": "b x - b'",
    "doc_gas": 34,
    "doc_description": "Equivalent to `SWAP` `[cc+1] STU`."
  },
  {
    "name": "SDBEGINS",
    "alias_of": "",
    "tlb": "#D72A_ x:(## 7) sss:((8 * x + 3) * Bit)",
    "doc_category": "cell_parse",
    "doc_opcode": "D72A_xsss",
    "doc_fift": "[slice] SDBEGINS",
    "doc_stack": "s - s''",
    "doc_gas": 31,
    "doc_description": "Checks whether `s` begins with constant bitstring `sss` of length `8x+3` (with continuation bit assumed), where `0 <= x <= 127`, and removes `sss` from `s` on success."
  },
  {
    "name": "SDFIRST",
    "alias_of": "",
    "tlb": "#C703",
    "doc_category": "compare_other",
    "doc_opcode": "C703",
    "doc_fift": "SDFIRST",
    "doc_stack": "s - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether the first bit of _Slice_ `s` is a one."
  },
  {
    "name": "RIST255_VALIDATE",
    "alias_of": "",
    "tlb": "#F921",
    "doc_category": "app_crypto",
    "doc_opcode": "F921",
    "doc_fift": "RIST255_VALIDATE",
    "doc_stack": "x -",
    "doc_gas": 226,
    "doc_description": "Checks that integer `x` is a valid representation of some curve point. Throws range_chk on error."
  },
  {
    "name": "BCHKBITSQ_VAR",
    "alias_of": "",
    "tlb": "#CF3D",
    "doc_category": "cell_build",
    "doc_opcode": "CF3D",
    "doc_fift": "BCHKBITSQ",
    "doc_stack": "b x - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether `x` bits can be stored into `b`, `0 <= x <= 1023`."
  },
  {
    "name": "DICTGETNEXTEQ",
    "alias_of": "",
    "tlb": "#F475",
    "doc_category": "dict_next",
    "doc_opcode": "F475",
    "doc_fift": "DICTGETNEXTEQ",
    "doc_stack": "k D n - x' k' -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTGETNEXT`, but computes the minimal key `k'` that is lexicographically greater than or equal to `k`."
  },
  {
    "name": "STULE4",
    "alias_of": "",
    "tlb": "#CF29",
    "doc_category": "cell_build",
    "doc_opcode": "CF29",
    "doc_fift": "STULE4",
    "doc_stack": "x b - b'",
    "doc_gas": 26,
    "doc_description": "Stores a little-endian unsigned 32-bit integer."
  },
  {
    "name": "DICTDEL",
    "alias_of": "",
    "tlb": "#F459",
    "doc_category": "dict_delete",
    "doc_opcode": "F459",
    "doc_fift": "DICTDEL",
    "doc_stack": "k D n - D' -1 or D 0",
    "doc_gas": 0,
    "doc_description": "Deletes `n`-bit key, represented by a _Slice_ `k`, from dictionary `D`. If the key is present, returns the modified dictionary `D'` and the success flag `-1`. Otherwise, returns the original dictionary `D` and `0`."
  },
  {
    "name": "DICTUGETNEXTEQ",
    "alias_of": "",
    "tlb": "#F47D",
    "doc_category": "dict_next",
    "doc_opcode": "F47D",
    "doc_fift": "DICTUGETNEXTEQ",
    "doc_stack": "i D n - x' i' -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTGETNEXTEQ`, but interprets keys as unsigned `n`-bit integers."
  },
  {
    "name": "IFNOTRETALT",
    "alias_of": "",
    "tlb": "#E309",
    "doc_category": "cont_conditional",
    "doc_opcode": "E309",
    "doc_fift": "IFNOTRETALT",
    "doc_stack": "f -",
    "doc_gas": 26,
    "doc_description": "Performs `RETALT` if integer `f=0`."
  },
  {
    "name": "LDUXQ",
    "alias_of": "",
    "tlb": "#D705",
    "doc_category": "cell_parse",
    "doc_opcode": "D705",
    "doc_fift": "LDUXQ",
    "doc_stack": "s l - x s' -1 or s 0",
    "doc_gas": 26,
    "doc_description": "Quiet version of `LDUX`."
  },
  {
    "name": "DICTMAX",
    "alias_of": "",
    "tlb": "#F48A",
    "doc_category": "dict_min",
    "doc_opcode": "F48A",
    "doc_fift": "DICTMAX",
    "doc_stack": "D n - x k -1 or 0",
    "doc_gas": 0,
    "doc_description": "Computes the maximal key `k` (represented by a _Slice_ with `n` data bits) in dictionary `D`, and returns `k` along with the associated value `x`."
  },
  {
    "name": "STIR",
    "alias_of": "",
    "tlb": "#CF0A cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF0Acc",
    "doc_fift": "[cc+1] STIR",
    "doc_stack": "b x - b'",
    "doc_gas": 34,
    "doc_description": "Equivalent to `SWAP` `[cc+1] STI`."
  },
  {
    "name": "SDCNTLEAD0",
    "alias_of": "",
    "tlb": "#C710",
    "doc_category": "compare_other",
    "doc_opcode": "C710",
    "doc_fift": "SDCNTLEAD0",
    "doc_stack": "s - n",
    "doc_gas": 26,
    "doc_description": "Returns the number of leading zeroes in `s`."
  },
  {
    "name": "AGAINEND",
    "alias_of": "",
    "tlb": "#EB",
    "doc_category": "cont_loops",
    "doc_opcode": "EB",
    "doc_fift": "AGAINEND\nAGAIN:",
    "doc_stack": "-",
    "doc_gas": 18,
    "doc_description": "Similar to `AGAIN`, but performed with respect to the current continuation `cc`."
  },
  {
    "name": "DICTISETB",
    "alias_of": "",
    "tlb": "#F442",
    "doc_category": "dict_set_builder",
    "doc_opcode": "F442",
    "doc_fift": "DICTISETB",
    "doc_stack": "b i D n - D'",
    "doc_gas": 0,
    "doc_description": ""
  },
  {
    "name": "DICTIREPLACE",
    "alias_of": "",
    "tlb": "#F424",
    "doc_category": "dict_set",
    "doc_opcode": "F424",
    "doc_fift": "DICTIREPLACE",
    "doc_stack": "x i D n - D' -1 or D 0",
    "doc_gas": 0,
    "doc_description": "`DICTREPLACE`, but with `i` a signed `n`-bit integer."
  },
  {
    "name": "PUSHNEGPOW2",
    "alias_of": "",
    "tlb": "#85 xx:uint8",
    "doc_category": "const_int",
    "doc_opcode": "85xx",
    "doc_fift": "[xx+1] PUSHNEGPOW2",
    "doc_stack": "- -2^(xx+1)",
    "doc_gas": 26,
    "doc_description": "Pushes `-2^(xx+1)` for `0 <= xx <= 255`."
  },
  {
    "name": "STREFR",
    "alias_of": "",
    "tlb": "#CF14",
    "doc_category": "cell_build",
    "doc_opcode": "CF14",
    "doc_fift": "STREFR",
    "doc_stack": "b c - b'",
    "doc_gas": 26,
    "doc_description": "Equivalent to `SWAP` `STREF`."
  },
  {
    "name": "BLS_G1_MULTIEXP",
    "alias_of": "",
    "tlb": "#F93014",
    "doc_category": "app_crypto",
    "doc_opcode": "F93014",
    "doc_fift": "BLS_G1_MULTIEXP",
    "doc_stack": "x_1 s_1 ... x_n s_n n - x_1*s_1+...+x_n*s_n",
    "doc_gas": null,
    "doc_description": "Calculates `x_1*s_1+...+x_n*s_n` for G1 points `x_i` and scalars `s_i`. Returns zero point if `n=0`. Any `s_i` is valid, including negative."
  },
  {
    "name": "REWRITESTDADDRQ",
    "alias_of": "",
    "tlb": "#FA45",
    "doc_category": "app_addr",
    "doc_opcode": "FA45",
    "doc_fift": "REWRITESTDADDRQ",
    "doc_stack": "s - x y -1 or 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of primitive `REWRITESTDADDR`."
  },
  {
    "name": "DICTIGETPREV",
    "alias_of": "",
    "tlb": "#F47A",
    "doc_category": "dict_next",
    "doc_opcode": "F47A",
    "doc_fift": "DICTIGETPREV",
    "doc_stack": "i D n - x' i' -1 or 0",
    "doc_gas": 0,
    "doc_description": "Similar to `DICTGETPREV`, but interprets keys as signed `n`-bit integers."
  },
  {
    "name": "P256_CHKSIGNU",
    "alias_of": "",
    "tlb": "#F914",
    "doc_category": "app_crypto",
    "doc_opcode": "F914",
    "doc_fift": "P256_CHKSIGNU",
    "doc_stack": "h sig k - ?",
    "doc_gas": 3526,
    "doc_description": "Checks seck256r1-signature `sig` of a number `h` (a 256-bit unsigned integer, usually computed as the hash of some data) and public key `k`. Returns -1 on success, 0 on failure. Public key is a 33-byte slice (encoded according to Sec. 2.3.4 point 2 of [SECG SEC 1](https://www.secg.org/sec1-v2.pdf)). Signature `sig` is a 64-byte slice (two 256-bit unsigned integers `r` and `s`)."
  },
  {
    "name": "SETCONTARGS_N",
    "alias_of": "",
    "tlb": "#EC r:uint4 n:uint4",
    "doc_category": "cont_stack",
    "doc_opcode": "ECrn",
    "doc_fift": "[r] [n] SETCONTARGS",
    "doc_stack": "x_1 x_2...x_r c - c'",
    "doc_gas": null,
    "doc_description": "Pushes `0 <= r <= 15` values `x_1...x_r` into the stack of (a copy of) the continuation `c`, starting with `x_1`. When `n` is 15 (-1 in Fift notation), does nothing with `c.nargs`. For `0 <= n <= 14`, sets `c.nargs` to the final size of the stack of `c'` plus `n`. In other words, transforms `c` into a _closure_ or a _partially applied function_, with `0 <= n <= 14` arguments missing."
  },
  {
    "name": "BLKSWX",
    "alias_of": "",
    "tlb": "#63",
    "doc_category": "stack_complex",
    "doc_opcode": "63",
    "doc_fift": "BLKSWX",
    "doc_stack": "",
    "doc_gas": 18,
    "doc_description": "Pops integers `i`,`j` from the stack, then performs `[i] [j] BLKSWAP`."
  },
  {
    "name": "INDEXQ",
    "alias_of": "",
    "tlb": "#6F6 k:uint4",
    "doc_category": "tuple",
    "doc_opcode": "6F6k",
    "doc_fift": "[k] INDEXQ",
    "doc_stack": "t - x",
    "doc_gas": 26,
    "doc_description": "Returns the `k`-th element of a _Tuple_ `t`, where `0 <= k <= 15`. In other words, returns `x_{k+1}` if `t=(x_1,...,x_n)`. If `k>=n`, or if `t` is _Null_, returns a _Null_ instead of `x`."
  },
  {
    "name": "XLOAD",
    "alias_of": "",
    "tlb": "#D73A",
    "doc_category": "cell_parse",
    "doc_opcode": "D73A",
    "doc_fift": "XLOAD",
    "doc_stack": "c - c'",
    "doc_gas": 0,
    "doc_description": "Loads an exotic cell `c` and returns an ordinary cell `c'`. If `c` is already ordinary, does nothing. If `c` cannot be loaded, throws an exception."
  }
]