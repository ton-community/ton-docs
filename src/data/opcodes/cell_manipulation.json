[
  {
    "name": "LDU",
    "alias_of": "",
    "tlb": "#D3 cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D3cc",
    "doc_fift": "[cc+1] LDU",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads an unsigned `cc+1`-bit integer `x` from _Slice_ `s`."
  },
  {
    "name": "STU",
    "alias_of": "",
    "tlb": "#CB cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CBcc",
    "doc_fift": "[cc+1] STU",
    "doc_stack": "x b - b'",
    "doc_gas": 26,
    "doc_description": "Stores an unsigned `cc+1`-bit integer `x` into _Builder_ `b`. In all other respects it is similar to `STI`."
  },
  {
    "name": "CTOS",
    "alias_of": "",
    "tlb": "#D0",
    "doc_category": "cell_parse",
    "doc_opcode": "D0",
    "doc_fift": "CTOS",
    "doc_stack": "c - s",
    "doc_gas": null,
    "doc_description": "Converts a _Cell_ into a _Slice_. Notice that `c` must be either an ordinary cell, or an exotic cell which is automatically _loaded_ to yield an ordinary cell `c'`, converted into a _Slice_ afterwards."
  },
  {
    "name": "NEWC",
    "alias_of": "",
    "tlb": "#C8",
    "doc_category": "cell_build",
    "doc_opcode": "C8",
    "doc_fift": "NEWC",
    "doc_stack": "- b",
    "doc_gas": 18,
    "doc_description": "Creates a new empty _Builder_."
  },
  {
    "name": "ENDC",
    "alias_of": "",
    "tlb": "#C9",
    "doc_category": "cell_build",
    "doc_opcode": "C9",
    "doc_fift": "ENDC",
    "doc_stack": "b - c",
    "doc_gas": 518,
    "doc_description": "Converts a _Builder_ into an ordinary _Cell_."
  },
  {
    "name": "STSLICER",
    "alias_of": "",
    "tlb": "#CF16",
    "doc_category": "cell_build",
    "doc_opcode": "CF16",
    "doc_fift": "STSLICER",
    "doc_stack": "b s - b'",
    "doc_gas": 26,
    "doc_description": "Equivalent to `SWAP` `STSLICE`."
  },
  {
    "name": "LDREF",
    "alias_of": "",
    "tlb": "#D4",
    "doc_category": "cell_parse",
    "doc_opcode": "D4",
    "doc_fift": "LDREF",
    "doc_stack": "s - c s'",
    "doc_gas": 18,
    "doc_description": "Loads a cell reference `c` from `s`."
  },
  {
    "name": "LDSLICEX",
    "alias_of": "",
    "tlb": "#D718",
    "doc_category": "cell_parse",
    "doc_opcode": "D718",
    "doc_fift": "LDSLICEX",
    "doc_stack": "s l - s'' s'",
    "doc_gas": 26,
    "doc_description": "Loads the first `0 <= l <= 1023` bits from _Slice_ `s` into a separate _Slice_ `s''`, returning the remainder of `s` as `s'`."
  },
  {
    "name": "PLDREFIDX",
    "alias_of": "",
    "tlb": "#D74E_ n:uint2",
    "doc_category": "cell_parse",
    "doc_opcode": "D74E_n",
    "doc_fift": "[n] PLDREFIDX",
    "doc_stack": "s - c",
    "doc_gas": 26,
    "doc_description": "Returns the `n`-th cell reference of _Slice_ `s`, where `0 <= n <= 3`."
  },
  {
    "name": "STREF",
    "alias_of": "",
    "tlb": "#CC",
    "doc_category": "cell_build",
    "doc_opcode": "CC",
    "doc_fift": "STREF",
    "doc_stack": "c b - b'",
    "doc_gas": 18,
    "doc_description": "Stores a reference to _Cell_ `c` into _Builder_ `b`."
  },
  {
    "name": "SBITS",
    "alias_of": "",
    "tlb": "#D749",
    "doc_category": "cell_parse",
    "doc_opcode": "D749",
    "doc_fift": "SBITS",
    "doc_stack": "s - l",
    "doc_gas": 26,
    "doc_description": "Returns the number of data bits in _Slice_ `s`."
  },
  {
    "name": "PLDU",
    "alias_of": "",
    "tlb": "#D70B cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D70Bcc",
    "doc_fift": "[cc+1] PLDU",
    "doc_stack": "s - x",
    "doc_gas": 34,
    "doc_description": "Preloads an unsigned `cc+1`-bit integer from `s`."
  },
  {
    "name": "STI",
    "alias_of": "",
    "tlb": "#CA cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CAcc",
    "doc_fift": "[cc+1] STI",
    "doc_stack": "x b - b'",
    "doc_gas": 26,
    "doc_description": "Stores a signed `cc+1`-bit integer `x` into _Builder_ `b` for `0 <= cc <= 255`, throws a range check exception if `x` does not fit into `cc+1` bits."
  },
  {
    "name": "LDI",
    "alias_of": "",
    "tlb": "#D2 cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D2cc",
    "doc_fift": "[cc+1] LDI",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads (i.e., parses) a signed `cc+1`-bit integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s'`."
  },
  {
    "name": "ENDS",
    "alias_of": "",
    "tlb": "#D1",
    "doc_category": "cell_parse",
    "doc_opcode": "D1",
    "doc_fift": "ENDS",
    "doc_stack": "s - ",
    "doc_gas": null,
    "doc_description": "Removes a _Slice_ `s` from the stack, and throws an exception if it is not empty."
  },
  {
    "name": "SDSKIPFIRST",
    "alias_of": "",
    "tlb": "#D721",
    "doc_category": "cell_parse",
    "doc_opcode": "D721",
    "doc_fift": "SDSKIPFIRST",
    "doc_stack": "s l - s'",
    "doc_gas": 26,
    "doc_description": "Returns all but the first `0 <= l <= 1023` bits of `s`. It is equivalent to `LDSLICEX` `NIP`."
  },
  {
    "name": "STIX",
    "alias_of": "",
    "tlb": "#CF00",
    "doc_category": "cell_build",
    "doc_opcode": "CF00",
    "doc_fift": "STIX",
    "doc_stack": "x b l - b'",
    "doc_gas": 26,
    "doc_description": "Stores a signed `l`-bit integer `x` into `b` for `0 <= l <= 257`."
  },
  {
    "name": "STUX",
    "alias_of": "",
    "tlb": "#CF01",
    "doc_category": "cell_build",
    "doc_opcode": "CF01",
    "doc_fift": "STUX",
    "doc_stack": "x b l - b'",
    "doc_gas": 26,
    "doc_description": "Stores an unsigned `l`-bit integer `x` into `b` for `0 <= l <= 256`."
  },
  {
    "name": "BBITS",
    "alias_of": "",
    "tlb": "#CF31",
    "doc_category": "cell_build",
    "doc_opcode": "CF31",
    "doc_fift": "BBITS",
    "doc_stack": "b - x",
    "doc_gas": 26,
    "doc_description": "Returns the number of data bits already stored in _Builder_ `b`."
  },
  {
    "name": "STBR",
    "alias_of": "",
    "tlb": "#CF17",
    "doc_category": "cell_build",
    "doc_opcode": "CF17",
    "doc_fift": "STBR\nBCONCAT",
    "doc_stack": "b b' - b''",
    "doc_gas": 26,
    "doc_description": "Concatenates two builders.\nEquivalent to `SWAP` `STB`."
  },
  {
    "name": "SREFS",
    "alias_of": "",
    "tlb": "#D74A",
    "doc_category": "cell_parse",
    "doc_opcode": "D74A",
    "doc_fift": "SREFS",
    "doc_stack": "s - r",
    "doc_gas": 26,
    "doc_description": "Returns the number of references in _Slice_ `s`."
  },
  {
    "name": "LDSLICE",
    "alias_of": "",
    "tlb": "#D6 cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D6cc",
    "doc_fift": "[cc+1] LDSLICE",
    "doc_stack": "s - s'' s'",
    "doc_gas": 26,
    "doc_description": "Cuts the next `cc+1` bits of `s` into a separate _Slice_ `s''`."
  },
  {
    "name": "PLDI",
    "alias_of": "",
    "tlb": "#D70A cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D70Acc",
    "doc_fift": "[cc+1] PLDI",
    "doc_stack": "s - x",
    "doc_gas": 34,
    "doc_description": "Preloads a signed `cc+1`-bit integer from _Slice_ `s`."
  },
  {
    "name": "PLDSLICEX",
    "alias_of": "",
    "tlb": "#D719",
    "doc_category": "cell_parse",
    "doc_opcode": "D719",
    "doc_fift": "PLDSLICEX",
    "doc_stack": "s l - s''",
    "doc_gas": 26,
    "doc_description": "Returns the first `0 <= l <= 1023` bits of `s` as `s''`."
  },
  {
    "name": "STZEROES",
    "alias_of": "",
    "tlb": "#CF40",
    "doc_category": "cell_build",
    "doc_opcode": "CF40",
    "doc_fift": "STZEROES",
    "doc_stack": "b n - b'",
    "doc_gas": 26,
    "doc_description": "Stores `n` binary zeroes into _Builder_ `b`."
  },
  {
    "name": "LDUX",
    "alias_of": "",
    "tlb": "#D701",
    "doc_category": "cell_parse",
    "doc_opcode": "D701",
    "doc_fift": "LDUX",
    "doc_stack": "s l - x s'",
    "doc_gas": 26,
    "doc_description": "Loads an unsigned `l`-bit integer `x` from (the first `l` bits of) `s`, with `0 <= l <= 256`."
  },
  {
    "name": "STSLICE",
    "alias_of": "",
    "tlb": "#CE",
    "doc_category": "cell_build",
    "doc_opcode": "CE",
    "doc_fift": "STSLICE",
    "doc_stack": "s b - b'",
    "doc_gas": 18,
    "doc_description": "Stores _Slice_ `s` into _Builder_ `b`."
  },
  {
    "name": "SPLIT",
    "alias_of": "",
    "tlb": "#D736",
    "doc_category": "cell_parse",
    "doc_opcode": "D736",
    "doc_fift": "SPLIT",
    "doc_stack": "s l r - s' s''",
    "doc_gas": 26,
    "doc_description": "Splits the first `0 <= l <= 1023` data bits and first `0 <= r <= 4` references from `s` into `s'`, returning the remainder of `s` as `s''`."
  },
  {
    "name": "LDIX",
    "alias_of": "",
    "tlb": "#D700",
    "doc_category": "cell_parse",
    "doc_opcode": "D700",
    "doc_fift": "LDIX",
    "doc_stack": "s l - x s'",
    "doc_gas": 26,
    "doc_description": "Loads a signed `l`-bit (`0 <= l <= 257`) integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s'`."
  },
  {
    "name": "SDSKIPLAST",
    "alias_of": "",
    "tlb": "#D723",
    "doc_category": "cell_parse",
    "doc_opcode": "D723",
    "doc_fift": "SDSKIPLAST",
    "doc_stack": "s l - s'",
    "doc_gas": 26,
    "doc_description": "Returns all but the last `0 <= l <= 1023` bits of `s`."
  },
  {
    "name": "SDCUTLAST",
    "alias_of": "",
    "tlb": "#D722",
    "doc_category": "cell_parse",
    "doc_opcode": "D722",
    "doc_fift": "SDCUTLAST",
    "doc_stack": "s l - s'",
    "doc_gas": 26,
    "doc_description": "Returns the last `0 <= l <= 1023` bits of `s`."
  },
  {
    "name": "SBITREFS",
    "alias_of": "",
    "tlb": "#D74B",
    "doc_category": "cell_parse",
    "doc_opcode": "D74B",
    "doc_fift": "SBITREFS",
    "doc_stack": "s - l r",
    "doc_gas": 26,
    "doc_description": "Returns both the number of data bits and the number of references in `s`."
  },
  {
    "name": "LDREFRTOS",
    "alias_of": "",
    "tlb": "#D5",
    "doc_category": "cell_parse",
    "doc_opcode": "D5",
    "doc_fift": "LDREFRTOS",
    "doc_stack": "s - s' s''",
    "doc_gas": null,
    "doc_description": "Equivalent to `LDREF` `SWAP` `CTOS`."
  },
  {
    "name": "SDSUBSTR",
    "alias_of": "",
    "tlb": "#D724",
    "doc_category": "cell_parse",
    "doc_opcode": "D724",
    "doc_fift": "SDSUBSTR",
    "doc_stack": "s l l' - s'",
    "doc_gas": 26,
    "doc_description": "Returns `0 <= l' <= 1023` bits of `s` starting from offset `0 <= l <= 1023`, thus extracting a bit substring out of the data of `s`."
  },
  {
    "name": "STB",
    "alias_of": "",
    "tlb": "#CF13",
    "doc_category": "cell_build",
    "doc_opcode": "CF13",
    "doc_fift": "STB",
    "doc_stack": "b' b - b''",
    "doc_gas": 26,
    "doc_description": "Appends all data from _Builder_ `b'` to _Builder_ `b`."
  },
  {
    "name": "XCTOS",
    "alias_of": "",
    "tlb": "#D739",
    "doc_category": "cell_parse",
    "doc_opcode": "D739",
    "doc_fift": "XCTOS",
    "doc_stack": "c - s ?",
    "doc_gas": 0,
    "doc_description": "Transforms an ordinary or exotic cell into a _Slice_, as if it were an ordinary cell. A flag is returned indicating whether `c` is exotic. If that be the case, its type can later be deserialized from the first eight bits of `s`."
  },
  {
    "name": "PLDUX",
    "alias_of": "",
    "tlb": "#D703",
    "doc_category": "cell_parse",
    "doc_opcode": "D703",
    "doc_fift": "PLDUX",
    "doc_stack": "s l - x",
    "doc_gas": 26,
    "doc_description": "Preloads an unsigned `l`-bit integer from `s`, for `0 <= l <= 256`."
  },
  {
    "name": "CDEPTH",
    "alias_of": "",
    "tlb": "#D765",
    "doc_category": "cell_parse",
    "doc_opcode": "D765",
    "doc_fift": "CDEPTH",
    "doc_stack": "c - x",
    "doc_gas": 26,
    "doc_description": "Returns the depth of _Cell_ `c`. If `c` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `c`. If `c` is a _Null_ instead of a _Cell_, returns zero."
  },
  {
    "name": "STSLICECONST",
    "alias_of": "",
    "tlb": "#CFC0_ x:(## 2) y:(## 3) c:(x * ^Cell) sss:((8 * y + 2) * Bit)",
    "doc_category": "cell_build",
    "doc_opcode": "CFC0_xysss",
    "doc_fift": "[slice] STSLICECONST",
    "doc_stack": "b - b'",
    "doc_gas": 24,
    "doc_description": "Stores a constant subslice `sss`.\n_Details:_ `sss` consists of `0 <= x <= 3` references and up to `8y+2` data bits, with `0 <= y <= 7`. Completion bit is assumed.\nNote that the assembler can replace `STSLICECONST` with `PUSHSLICE` `STSLICER` if the slice is too big."
  },
  {
    "name": "SDCUTFIRST",
    "alias_of": "",
    "tlb": "#D720",
    "doc_category": "cell_parse",
    "doc_opcode": "D720",
    "doc_fift": "SDCUTFIRST",
    "doc_stack": "s l - s'",
    "doc_gas": 26,
    "doc_description": "Returns the first `0 <= l <= 1023` bits of `s`. It is equivalent to `PLDSLICEX`."
  },
  {
    "name": "SDEPTH",
    "alias_of": "",
    "tlb": "#D764",
    "doc_category": "cell_parse",
    "doc_opcode": "D764",
    "doc_fift": "SDEPTH",
    "doc_stack": "s - x",
    "doc_gas": 26,
    "doc_description": "Returns the depth of _Slice_ `s`. If `s` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `s`."
  },
  {
    "name": "STONES",
    "alias_of": "",
    "tlb": "#CF41",
    "doc_category": "cell_build",
    "doc_opcode": "CF41",
    "doc_fift": "STONES",
    "doc_stack": "b n - b'",
    "doc_gas": 26,
    "doc_description": "Stores `n` binary ones into _Builder_ `b`."
  },
  {
    "name": "SDBEGINSQ",
    "alias_of": "",
    "tlb": "#D72E_ x:(## 7) sss:((8 * x + 3) * Bit)",
    "doc_category": "cell_parse",
    "doc_opcode": "D72E_xsss",
    "doc_fift": "[slice] SDBEGINSQ",
    "doc_stack": "s - s'' -1 or s 0",
    "doc_gas": 31,
    "doc_description": "A quiet version of `SDBEGINS`."
  },
  {
    "name": "SCUTLAST",
    "alias_of": "",
    "tlb": "#D732",
    "doc_category": "cell_parse",
    "doc_opcode": "D732",
    "doc_fift": "SCUTLAST",
    "doc_stack": "s l r - s'",
    "doc_gas": 26,
    "doc_description": "Returns the last `0 <= l <= 1023` data bits and last `0 <= r <= 4` references of `s`."
  },
  {
    "name": "LDULE4",
    "alias_of": "",
    "tlb": "#D751",
    "doc_category": "cell_parse",
    "doc_opcode": "D751",
    "doc_fift": "LDULE4",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads a little-endian unsigned 32-bit integer."
  },
  {
    "name": "STBREF",
    "alias_of": "",
    "tlb": "#CF11",
    "doc_category": "cell_build",
    "doc_opcode": "CF11",
    "doc_fift": "STBREF",
    "doc_stack": "b' b - b''",
    "doc_gas": 526,
    "doc_description": "Equivalent to `SWAP` `STBREFR`."
  },
  {
    "name": "ENDXC",
    "alias_of": "",
    "tlb": "#CF23",
    "doc_category": "cell_build",
    "doc_opcode": "CF23",
    "doc_fift": "ENDXC",
    "doc_stack": "b x - c",
    "doc_gas": 526,
    "doc_description": "If `x!=0`, creates a _special_ or _exotic_ cell from _Builder_ `b`.\nThe type of the exotic cell must be stored in the first 8 bits of `b`.\nIf `x=0`, it is equivalent to `ENDC`. Otherwise some validity checks on the data and references of `b` are performed before creating the exotic cell."
  },
  {
    "name": "PLDUZ",
    "alias_of": "",
    "tlb": "#D714_ c:uint3",
    "doc_category": "cell_parse",
    "doc_opcode": "D714_c",
    "doc_fift": "[32(c+1)] PLDUZ",
    "doc_stack": "s - s x",
    "doc_gas": 26,
    "doc_description": "Preloads the first `32(c+1)` bits of _Slice_ `s` into an unsigned integer `x`, for `0 <= c <= 7`. If `s` is shorter than necessary, missing bits are assumed to be zero. This operation is intended to be used along with `IFBITJMP` and similar instructions."
  },
  {
    "name": "PLDSLICE",
    "alias_of": "",
    "tlb": "#D71D cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D71Dcc",
    "doc_fift": "[cc+1] PLDSLICE",
    "doc_stack": "s - s''",
    "doc_gas": 34,
    "doc_description": "Returns the first `0 < cc+1 <= 256` bits of `s` as `s''`."
  },
  {
    "name": "STUR",
    "alias_of": "",
    "tlb": "#CF0B cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF0Bcc",
    "doc_fift": "[cc+1] STUR",
    "doc_stack": "b x - b'",
    "doc_gas": 34,
    "doc_description": "Equivalent to `SWAP` `[cc+1] STU`."
  },
  {
    "name": "SDBEGINS",
    "alias_of": "",
    "tlb": "#D72A_ x:(## 7) sss:((8 * x + 3) * Bit)",
    "doc_category": "cell_parse",
    "doc_opcode": "D72A_xsss",
    "doc_fift": "[slice] SDBEGINS",
    "doc_stack": "s - s''",
    "doc_gas": 31,
    "doc_description": "Checks whether `s` begins with constant bitstring `sss` of length `8x+3` (with continuation bit assumed), where `0 <= x <= 127`, and removes `sss` from `s` on success."
  },
  {
    "name": "BCHKBITSQ_VAR",
    "alias_of": "",
    "tlb": "#CF3D",
    "doc_category": "cell_build",
    "doc_opcode": "CF3D",
    "doc_fift": "BCHKBITSQ",
    "doc_stack": "b x - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether `x` bits can be stored into `b`, `0 <= x <= 1023`."
  },
  {
    "name": "STULE4",
    "alias_of": "",
    "tlb": "#CF29",
    "doc_category": "cell_build",
    "doc_opcode": "CF29",
    "doc_fift": "STULE4",
    "doc_stack": "x b - b'",
    "doc_gas": 26,
    "doc_description": "Stores a little-endian unsigned 32-bit integer."
  },
  {
    "name": "LDUXQ",
    "alias_of": "",
    "tlb": "#D705",
    "doc_category": "cell_parse",
    "doc_opcode": "D705",
    "doc_fift": "LDUXQ",
    "doc_stack": "s l - x s' -1 or s 0",
    "doc_gas": 26,
    "doc_description": "Quiet version of `LDUX`."
  },
  {
    "name": "STIR",
    "alias_of": "",
    "tlb": "#CF0A cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF0Acc",
    "doc_fift": "[cc+1] STIR",
    "doc_stack": "b x - b'",
    "doc_gas": 34,
    "doc_description": "Equivalent to `SWAP` `[cc+1] STI`."
  },
  {
    "name": "STREFR",
    "alias_of": "",
    "tlb": "#CF14",
    "doc_category": "cell_build",
    "doc_opcode": "CF14",
    "doc_fift": "STREFR",
    "doc_stack": "b c - b'",
    "doc_gas": 26,
    "doc_description": "Equivalent to `SWAP` `STREF`."
  },
  {
    "name": "XLOAD",
    "alias_of": "",
    "tlb": "#D73A",
    "doc_category": "cell_parse",
    "doc_opcode": "D73A",
    "doc_fift": "XLOAD",
    "doc_stack": "c - c'",
    "doc_gas": 0,
    "doc_description": "Loads an exotic cell `c` and returns an ordinary cell `c'`. If `c` is already ordinary, does nothing. If `c` cannot be loaded, throws an exception."
  }
]