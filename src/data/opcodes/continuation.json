[
  {
    "name": "IFJMP",
    "alias_of": "",
    "tlb": "#E0",
    "doc_category": "cont_conditional",
    "doc_opcode": "E0",
    "doc_fift": "IFJMP",
    "doc_stack": "f c - ",
    "doc_gas": 18,
    "doc_description": "Jumps to `c` (similarly to `JMPX`), but only if `f` is non-zero."
  },
  {
    "name": "CALLREF",
    "alias_of": "",
    "tlb": "#DB3C c:^Cell",
    "doc_category": "cont_basic",
    "doc_opcode": "DB3C",
    "doc_fift": "[ref] CALLREF",
    "doc_stack": "",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `CALLX`."
  },
  {
    "name": "POPCTR",
    "alias_of": "",
    "tlb": "#ED5 i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "ED5i",
    "doc_fift": "c[i] POPCTR\nc[i] POP",
    "doc_stack": "x - ",
    "doc_gas": 26,
    "doc_description": "Pops a value `x` from the stack and stores it into control register `c(i)`, if supported in the current codepage. Notice that if a control register accepts only values of a specific type, a type-checking exception may occur."
  },
  {
    "name": "IFNOTRET",
    "alias_of": "",
    "tlb": "#DD",
    "doc_category": "cont_conditional",
    "doc_opcode": "DD",
    "doc_fift": "IFNOTRET\nIF:",
    "doc_stack": "f - ",
    "doc_gas": 18,
    "doc_description": "Performs a `RET`, but only if integer `f` is zero."
  },
  {
    "name": "PUSHCTR",
    "alias_of": "",
    "tlb": "#ED4 i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "ED4i",
    "doc_fift": "c[i] PUSHCTR\nc[i] PUSH",
    "doc_stack": "- x",
    "doc_gas": 26,
    "doc_description": "Pushes the current value of control register `c(i)`. If the control register is not supported in the current codepage, or if it does not have a value, an exception is triggered."
  },
  {
    "name": "CALLDICT",
    "alias_of": "",
    "tlb": "#F0 n:uint8",
    "doc_category": "cont_dict",
    "doc_opcode": "F0nn",
    "doc_fift": "[nn] CALL\n[nn] CALLDICT",
    "doc_stack": "- nn",
    "doc_gas": 0,
    "doc_description": "Calls the continuation in `c3`, pushing integer `0 <= nn <= 255` into its stack as an argument.\nApproximately equivalent to `[nn] PUSHINT` `c3 PUSHCTR` `EXECUTE`."
  },
  {
    "name": "IFELSE",
    "alias_of": "",
    "tlb": "#E2",
    "doc_category": "cont_conditional",
    "doc_opcode": "E2",
    "doc_fift": "IFELSE",
    "doc_stack": "f c c' - ",
    "doc_gas": 18,
    "doc_description": "If integer `f` is non-zero, executes `c`, otherwise executes `c'`. Equivalent to `CONDSELCHK` `EXECUTE`."
  },
  {
    "name": "IFJMPREF",
    "alias_of": "",
    "tlb": "#E302 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E302",
    "doc_fift": "[ref] IFJMPREF",
    "doc_stack": "f - ",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `IFJMP`."
  },
  {
    "name": "IF",
    "alias_of": "",
    "tlb": "#DE",
    "doc_category": "cont_conditional",
    "doc_opcode": "DE",
    "doc_fift": "IF",
    "doc_stack": "f c - ",
    "doc_gas": 18,
    "doc_description": "Performs `EXECUTE` for `c` (i.e., _executes_ `c`), but only if integer `f` is non-zero. Otherwise simply discards both values."
  },
  {
    "name": "IFREFELSE",
    "alias_of": "",
    "tlb": "#E30D c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E30D",
    "doc_fift": "[ref] IFREFELSE",
    "doc_stack": "f c -",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `SWAP` `IFELSE`, with the optimization that the cell reference is not actually loaded into a _Slice_ and then converted into an ordinary _Continuation_ if `f=0`. Similar remarks apply to the next two primitives: cells are converted into continuations only when necessary."
  },
  {
    "name": "UNTIL",
    "alias_of": "",
    "tlb": "#E6",
    "doc_category": "cont_loops",
    "doc_opcode": "E6",
    "doc_fift": "UNTIL",
    "doc_stack": "c - ",
    "doc_gas": 18,
    "doc_description": "Executes continuation `c`, then pops an integer `x` from the resulting stack. If `x` is zero, performs another iteration of this loop. The actual implementation of this primitive involves an extraordinary continuation `ec_until` with its arguments set to the body of the loop (continuation `c`) and the original current continuation `cc`. This extraordinary continuation is then saved into the savelist of `c` as `c.c0` and the modified `c` is then executed. The other loop primitives are implemented similarly with the aid of suitable extraordinary continuations."
  },
  {
    "name": "SAMEALTSAVE",
    "alias_of": "",
    "tlb": "#EDFB",
    "doc_category": "cont_registers",
    "doc_opcode": "EDFB",
    "doc_fift": "SAMEALTSAVE",
    "doc_stack": "-",
    "doc_gas": 26,
    "doc_description": "Sets `c1` to `c0`, but first saves the old value of `c1` into the savelist of `c0`.\nEquivalent to `c1 SAVE` `SAMEALT`."
  },
  {
    "name": "WHILE",
    "alias_of": "",
    "tlb": "#E8",
    "doc_category": "cont_loops",
    "doc_opcode": "E8",
    "doc_fift": "WHILE",
    "doc_stack": "c' c - ",
    "doc_gas": 18,
    "doc_description": "Executes `c'` and pops an integer `x` from the resulting stack. If `x` is zero, exists the loop and transfers control to the original `cc`. If `x` is non-zero, executes `c`, and then begins a new iteration."
  },
  {
    "name": "SAVE",
    "alias_of": "",
    "tlb": "#EDA i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "EDAi",
    "doc_fift": "c[i] SAVE\nc[i] SAVECTR",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Saves the current value of `c(i)` into the savelist of continuation `c0`. If an entry for `c[i]` is already present in the savelist of `c0`, nothing is done. Equivalent to `c[i] PUSHCTR` `c[i] SETRETCTR`."
  },
  {
    "name": "EXECUTE",
    "alias_of": "",
    "tlb": "#D8",
    "doc_category": "cont_basic",
    "doc_opcode": "D8",
    "doc_fift": "EXECUTE\nCALLX",
    "doc_stack": "c - ",
    "doc_gas": 18,
    "doc_description": "_Calls_, or _executes_, continuation `c`."
  },
  {
    "name": "IFREF",
    "alias_of": "",
    "tlb": "#E300 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E300",
    "doc_fift": "[ref] IFREF",
    "doc_stack": "f - ",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `IF`, with the optimization that the cell reference is not actually loaded into a _Slice_ and then converted into an ordinary _Continuation_ if `f=0`.\nGas consumption of this primitive depends on whether `f=0` and whether the reference was loaded before.\nSimilar remarks apply other primitives that accept a continuation as a reference."
  },
  {
    "name": "IFNOTJMP",
    "alias_of": "",
    "tlb": "#E1",
    "doc_category": "cont_conditional",
    "doc_opcode": "E1",
    "doc_fift": "IFNOTJMP",
    "doc_stack": "f c - ",
    "doc_gas": 18,
    "doc_description": "Jumps to `c` (similarly to `JMPX`), but only if `f` is zero."
  },
  {
    "name": "IFREFELSEREF",
    "alias_of": "",
    "tlb": "#E30F c1:^Cell c2:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E30F",
    "doc_fift": "[ref] [ref] IFREFELSEREF",
    "doc_stack": "f -",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `PUSHREFCONT` `IFELSE`."
  },
  {
    "name": "IFELSEREF",
    "alias_of": "",
    "tlb": "#E30E c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E30E",
    "doc_fift": "[ref] IFELSEREF",
    "doc_stack": "f c -",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `IFELSE`."
  },
  {
    "name": "IFRET",
    "alias_of": "",
    "tlb": "#DC",
    "doc_category": "cont_conditional",
    "doc_opcode": "DC",
    "doc_fift": "IFRET\nIFNOT:",
    "doc_stack": "f - ",
    "doc_gas": 18,
    "doc_description": "Performs a `RET`, but only if integer `f` is non-zero. If `f` is a `NaN`, throws an integer overflow exception."
  },
  {
    "name": "IFNOT",
    "alias_of": "",
    "tlb": "#DF",
    "doc_category": "cont_conditional",
    "doc_opcode": "DF",
    "doc_fift": "IFNOT",
    "doc_stack": "f c - ",
    "doc_gas": 18,
    "doc_description": "Executes continuation `c`, but only if integer `f` is zero. Otherwise simply discards both values."
  },
  {
    "name": "REPEAT",
    "alias_of": "",
    "tlb": "#E4",
    "doc_category": "cont_loops",
    "doc_opcode": "E4",
    "doc_fift": "REPEAT",
    "doc_stack": "n c - ",
    "doc_gas": 18,
    "doc_description": "Executes continuation `c` `n` times, if integer `n` is non-negative. If `n>=2^31` or `n<-2^31`, generates a range check exception.\nNotice that a `RET` inside the code of `c` works as a `continue`, not as a `break`. One should use either alternative (experimental) loops or alternative `RETALT` (along with a `SETEXITALT` before the loop) to `break` out of a loop."
  },
  {
    "name": "SETCONTCTR",
    "alias_of": "",
    "tlb": "#ED6 i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "ED6i",
    "doc_fift": "c[i] SETCONT\nc[i] SETCONTCTR",
    "doc_stack": "x c - c'",
    "doc_gas": 26,
    "doc_description": "Stores `x` into the savelist of continuation `c` as `c(i)`, and returns the resulting continuation `c'`. Almost all operations with continuations may be expressed in terms of `SETCONTCTR`, `POPCTR`, and `PUSHCTR`."
  },
  {
    "name": "COMPOSALT",
    "alias_of": "",
    "tlb": "#EDF1",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF1",
    "doc_fift": "COMPOSALT\nBOOLOR",
    "doc_stack": "c c' - c''",
    "doc_gas": 26,
    "doc_description": "Computes the alternative composition `compose1(c, c')`, which has the meaning of ''perform `c`, and, if not successful, perform `c'`'' (if `c` is a boolean circuit). Equivalent to `SWAP` `c1 SETCONT`."
  },
  {
    "name": "SETCONTVARARGS",
    "alias_of": "",
    "tlb": "#ED11",
    "doc_category": "cont_stack",
    "doc_opcode": "ED11",
    "doc_fift": "SETCONTVARARGS",
    "doc_stack": "x_1 x_2...x_r c r n - c'",
    "doc_gas": null,
    "doc_description": "Similar to `SETCONTARGS`, but with `0 <= r <= 255` and `-1 <= n <= 255` taken from the stack."
  },
  {
    "name": "CALLXARGS_VAR",
    "alias_of": "",
    "tlb": "#DB0 p:uint4",
    "doc_category": "cont_basic",
    "doc_opcode": "DB0p",
    "doc_fift": "[p] -1 CALLXARGS",
    "doc_stack": "c - ",
    "doc_gas": 26,
    "doc_description": "_Calls_ continuation `c` with `0 <= p <= 15` parameters, expecting an arbitrary number of return values."
  },
  {
    "name": "IFNOTJMPREF",
    "alias_of": "",
    "tlb": "#E303 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E303",
    "doc_fift": "[ref] IFNOTJMPREF",
    "doc_stack": "f - ",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `IFNOTJMP`."
  },
  {
    "name": "CALLDICT_LONG",
    "alias_of": "",
    "tlb": "#F12_ n:uint14",
    "doc_category": "cont_dict",
    "doc_opcode": "F12_n",
    "doc_fift": "[n] CALL\n[n] CALLDICT",
    "doc_stack": "- n",
    "doc_gas": 0,
    "doc_description": "For `0 <= n < 2^14`, an encoding of `[n] CALL` for larger values of `n`."
  },
  {
    "name": "BLESS",
    "alias_of": "",
    "tlb": "#ED1E",
    "doc_category": "cont_create",
    "doc_opcode": "ED1E",
    "doc_fift": "BLESS",
    "doc_stack": "s - c",
    "doc_gas": 26,
    "doc_description": "Transforms a _Slice_ `s` into a simple ordinary continuation `c`, with `c.code=s` and an empty stack and savelist."
  },
  {
    "name": "CALLXARGS",
    "alias_of": "",
    "tlb": "#DA p:uint4 r:uint4",
    "doc_category": "cont_basic",
    "doc_opcode": "DApr",
    "doc_fift": "[p] [r] CALLXARGS",
    "doc_stack": "c - ",
    "doc_gas": 26,
    "doc_description": "_Calls_ continuation `c` with `p` parameters and expecting `r` return values\n`0 <= p <= 15`, `0 <= r <= 15`"
  },
  {
    "name": "IFNOTREF",
    "alias_of": "",
    "tlb": "#E301 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E301",
    "doc_fift": "[ref] IFNOTREF",
    "doc_stack": "f - ",
    "doc_gas": null,
    "doc_description": "Equivalent to `PUSHREFCONT` `IFNOT`."
  },
  {
    "name": "JMPX",
    "alias_of": "",
    "tlb": "#D9",
    "doc_category": "cont_basic",
    "doc_opcode": "D9",
    "doc_fift": "JMPX",
    "doc_stack": "c - ",
    "doc_gas": 18,
    "doc_description": "_Jumps_, or transfers control, to continuation `c`.\nThe remainder of the previous current continuation `cc` is discarded."
  },
  {
    "name": "PREPAREDICT",
    "alias_of": "",
    "tlb": "#F1A_ n:uint14",
    "doc_category": "cont_dict",
    "doc_opcode": "F1A_n",
    "doc_fift": "[n] PREPARE\n[n] PREPAREDICT",
    "doc_stack": " - n c",
    "doc_gas": 0,
    "doc_description": "Equivalent to `n PUSHINT` `c3 PUSHCTR`, for `0 <= n < 2^14`.\nIn this way, `[n] CALL` is approximately equivalent to `[n] PREPARE` `EXECUTE`, and `[n] JMP` is approximately equivalent to `[n] PREPARE` `JMPX`.\nOne might use, for instance, `CALLXARGS` or `CALLCC` instead of `EXECUTE` here."
  },
  {
    "name": "IFRETALT",
    "alias_of": "",
    "tlb": "#E308",
    "doc_category": "cont_conditional",
    "doc_opcode": "E308",
    "doc_fift": "IFRETALT",
    "doc_stack": "f -",
    "doc_gas": 26,
    "doc_description": "Performs `RETALT` if integer `f!=0`."
  },
  {
    "name": "JMPXDATA",
    "alias_of": "",
    "tlb": "#DB35",
    "doc_category": "cont_basic",
    "doc_opcode": "DB35",
    "doc_fift": "JMPXDATA",
    "doc_stack": "c - ",
    "doc_gas": 26,
    "doc_description": "Similar to `CALLCC`, but the remainder of the current continuation (the old value of `cc`) is converted into a _Slice_ before pushing it into the stack of `c`."
  },
  {
    "name": "RUNVM",
    "alias_of": "",
    "tlb": "#DB4 flags:(## 12)",
    "doc_category": "cont_basic",
    "doc_opcode": "DB4fff",
    "doc_fift": "flags RUNVM",
    "doc_stack": "x_1 ... x_n n code [r] [c4] [c7] [g_l] [g_m] - x'_1 ... x'_m exitcode [data'] [c4'] [c5] [g_c]",
    "doc_gas": 0,
    "doc_description": "Runs child VM with code `code` and stack `x_1...x_n`. Returns the resulting stack `x'_1...x'_m` and exitcode. Other arguments and return values are enabled by flags."
  },
  {
    "name": "IFNOTRETALT",
    "alias_of": "",
    "tlb": "#E309",
    "doc_category": "cont_conditional",
    "doc_opcode": "E309",
    "doc_fift": "IFNOTRETALT",
    "doc_stack": "f -",
    "doc_gas": 26,
    "doc_description": "Performs `RETALT` if integer `f=0`."
  },
  {
    "name": "AGAINEND",
    "alias_of": "",
    "tlb": "#EB",
    "doc_category": "cont_loops",
    "doc_opcode": "EB",
    "doc_fift": "AGAINEND\nAGAIN:",
    "doc_stack": "-",
    "doc_gas": 18,
    "doc_description": "Similar to `AGAIN`, but performed with respect to the current continuation `cc`."
  },
  {
    "name": "SETCONTARGS_N",
    "alias_of": "",
    "tlb": "#EC r:uint4 n:uint4",
    "doc_category": "cont_stack",
    "doc_opcode": "ECrn",
    "doc_fift": "[r] [n] SETCONTARGS",
    "doc_stack": "x_1 x_2...x_r c - c'",
    "doc_gas": null,
    "doc_description": "Pushes `0 <= r <= 15` values `x_1...x_r` into the stack of (a copy of) the continuation `c`, starting with `x_1`. When `n` is 15 (-1 in Fift notation), does nothing with `c.nargs`. For `0 <= n <= 14`, sets `c.nargs` to the final size of the stack of `c'` plus `n`. In other words, transforms `c` into a _closure_ or a _partially applied function_, with `0 <= n <= 14` arguments missing."
  }
]